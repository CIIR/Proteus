/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ciir.proteus.galago.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CollectionInfo implements org.apache.thrift.TBase<CollectionInfo, CollectionInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CollectionInfo");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NUM_DOCS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_docs", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField VOCAB_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("vocab_size", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField NUM_TOKENS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_tokens", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField FIELDS_FIELD_DESC = new org.apache.thrift.protocol.TField("fields", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CollectionInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CollectionInfoTupleSchemeFactory());
  }

  /**
   * 
   * @see ProteusType
   */
  public ProteusType type; // required
  public long num_docs; // required
  public long vocab_size; // required
  public long num_tokens; // required
  public List<String> fields; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see ProteusType
     */
    TYPE((short)1, "type"),
    NUM_DOCS((short)2, "num_docs"),
    VOCAB_SIZE((short)3, "vocab_size"),
    NUM_TOKENS((short)4, "num_tokens"),
    FIELDS((short)5, "fields");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // NUM_DOCS
          return NUM_DOCS;
        case 3: // VOCAB_SIZE
          return VOCAB_SIZE;
        case 4: // NUM_TOKENS
          return NUM_TOKENS;
        case 5: // FIELDS
          return FIELDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUM_DOCS_ISSET_ID = 0;
  private static final int __VOCAB_SIZE_ISSET_ID = 1;
  private static final int __NUM_TOKENS_ISSET_ID = 2;
  private BitSet __isset_bit_vector = new BitSet(3);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ProteusType.class)));
    tmpMap.put(_Fields.NUM_DOCS, new org.apache.thrift.meta_data.FieldMetaData("num_docs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VOCAB_SIZE, new org.apache.thrift.meta_data.FieldMetaData("vocab_size", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NUM_TOKENS, new org.apache.thrift.meta_data.FieldMetaData("num_tokens", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FIELDS, new org.apache.thrift.meta_data.FieldMetaData("fields", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CollectionInfo.class, metaDataMap);
  }

  public CollectionInfo() {
  }

  public CollectionInfo(
    ProteusType type,
    long num_docs,
    long vocab_size,
    long num_tokens,
    List<String> fields)
  {
    this();
    this.type = type;
    this.num_docs = num_docs;
    setNum_docsIsSet(true);
    this.vocab_size = vocab_size;
    setVocab_sizeIsSet(true);
    this.num_tokens = num_tokens;
    setNum_tokensIsSet(true);
    this.fields = fields;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CollectionInfo(CollectionInfo other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.num_docs = other.num_docs;
    this.vocab_size = other.vocab_size;
    this.num_tokens = other.num_tokens;
    if (other.isSetFields()) {
      List<String> __this__fields = new ArrayList<String>();
      for (String other_element : other.fields) {
        __this__fields.add(other_element);
      }
      this.fields = __this__fields;
    }
  }

  public CollectionInfo deepCopy() {
    return new CollectionInfo(this);
  }

  @Override
  public void clear() {
    this.type = null;
    setNum_docsIsSet(false);
    this.num_docs = 0;
    setVocab_sizeIsSet(false);
    this.vocab_size = 0;
    setNum_tokensIsSet(false);
    this.num_tokens = 0;
    this.fields = null;
  }

  /**
   * 
   * @see ProteusType
   */
  public ProteusType getType() {
    return this.type;
  }

  /**
   * 
   * @see ProteusType
   */
  public CollectionInfo setType(ProteusType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public long getNum_docs() {
    return this.num_docs;
  }

  public CollectionInfo setNum_docs(long num_docs) {
    this.num_docs = num_docs;
    setNum_docsIsSet(true);
    return this;
  }

  public void unsetNum_docs() {
    __isset_bit_vector.clear(__NUM_DOCS_ISSET_ID);
  }

  /** Returns true if field num_docs is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_docs() {
    return __isset_bit_vector.get(__NUM_DOCS_ISSET_ID);
  }

  public void setNum_docsIsSet(boolean value) {
    __isset_bit_vector.set(__NUM_DOCS_ISSET_ID, value);
  }

  public long getVocab_size() {
    return this.vocab_size;
  }

  public CollectionInfo setVocab_size(long vocab_size) {
    this.vocab_size = vocab_size;
    setVocab_sizeIsSet(true);
    return this;
  }

  public void unsetVocab_size() {
    __isset_bit_vector.clear(__VOCAB_SIZE_ISSET_ID);
  }

  /** Returns true if field vocab_size is set (has been assigned a value) and false otherwise */
  public boolean isSetVocab_size() {
    return __isset_bit_vector.get(__VOCAB_SIZE_ISSET_ID);
  }

  public void setVocab_sizeIsSet(boolean value) {
    __isset_bit_vector.set(__VOCAB_SIZE_ISSET_ID, value);
  }

  public long getNum_tokens() {
    return this.num_tokens;
  }

  public CollectionInfo setNum_tokens(long num_tokens) {
    this.num_tokens = num_tokens;
    setNum_tokensIsSet(true);
    return this;
  }

  public void unsetNum_tokens() {
    __isset_bit_vector.clear(__NUM_TOKENS_ISSET_ID);
  }

  /** Returns true if field num_tokens is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_tokens() {
    return __isset_bit_vector.get(__NUM_TOKENS_ISSET_ID);
  }

  public void setNum_tokensIsSet(boolean value) {
    __isset_bit_vector.set(__NUM_TOKENS_ISSET_ID, value);
  }

  public int getFieldsSize() {
    return (this.fields == null) ? 0 : this.fields.size();
  }

  public java.util.Iterator<String> getFieldsIterator() {
    return (this.fields == null) ? null : this.fields.iterator();
  }

  public void addToFields(String elem) {
    if (this.fields == null) {
      this.fields = new ArrayList<String>();
    }
    this.fields.add(elem);
  }

  public List<String> getFields() {
    return this.fields;
  }

  public CollectionInfo setFields(List<String> fields) {
    this.fields = fields;
    return this;
  }

  public void unsetFields() {
    this.fields = null;
  }

  /** Returns true if field fields is set (has been assigned a value) and false otherwise */
  public boolean isSetFields() {
    return this.fields != null;
  }

  public void setFieldsIsSet(boolean value) {
    if (!value) {
      this.fields = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((ProteusType)value);
      }
      break;

    case NUM_DOCS:
      if (value == null) {
        unsetNum_docs();
      } else {
        setNum_docs((Long)value);
      }
      break;

    case VOCAB_SIZE:
      if (value == null) {
        unsetVocab_size();
      } else {
        setVocab_size((Long)value);
      }
      break;

    case NUM_TOKENS:
      if (value == null) {
        unsetNum_tokens();
      } else {
        setNum_tokens((Long)value);
      }
      break;

    case FIELDS:
      if (value == null) {
        unsetFields();
      } else {
        setFields((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case NUM_DOCS:
      return Long.valueOf(getNum_docs());

    case VOCAB_SIZE:
      return Long.valueOf(getVocab_size());

    case NUM_TOKENS:
      return Long.valueOf(getNum_tokens());

    case FIELDS:
      return getFields();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case NUM_DOCS:
      return isSetNum_docs();
    case VOCAB_SIZE:
      return isSetVocab_size();
    case NUM_TOKENS:
      return isSetNum_tokens();
    case FIELDS:
      return isSetFields();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CollectionInfo)
      return this.equals((CollectionInfo)that);
    return false;
  }

  public boolean equals(CollectionInfo that) {
    if (that == null)
      return false;

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_num_docs = true;
    boolean that_present_num_docs = true;
    if (this_present_num_docs || that_present_num_docs) {
      if (!(this_present_num_docs && that_present_num_docs))
        return false;
      if (this.num_docs != that.num_docs)
        return false;
    }

    boolean this_present_vocab_size = true;
    boolean that_present_vocab_size = true;
    if (this_present_vocab_size || that_present_vocab_size) {
      if (!(this_present_vocab_size && that_present_vocab_size))
        return false;
      if (this.vocab_size != that.vocab_size)
        return false;
    }

    boolean this_present_num_tokens = true;
    boolean that_present_num_tokens = true;
    if (this_present_num_tokens || that_present_num_tokens) {
      if (!(this_present_num_tokens && that_present_num_tokens))
        return false;
      if (this.num_tokens != that.num_tokens)
        return false;
    }

    boolean this_present_fields = true && this.isSetFields();
    boolean that_present_fields = true && that.isSetFields();
    if (this_present_fields || that_present_fields) {
      if (!(this_present_fields && that_present_fields))
        return false;
      if (!this.fields.equals(that.fields))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(CollectionInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CollectionInfo typedOther = (CollectionInfo)other;

    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_docs()).compareTo(typedOther.isSetNum_docs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_docs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_docs, typedOther.num_docs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVocab_size()).compareTo(typedOther.isSetVocab_size());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVocab_size()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vocab_size, typedOther.vocab_size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_tokens()).compareTo(typedOther.isSetNum_tokens());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_tokens()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_tokens, typedOther.num_tokens);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFields()).compareTo(typedOther.isSetFields());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFields()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fields, typedOther.fields);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CollectionInfo(");
    boolean first = true;

    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("num_docs:");
    sb.append(this.num_docs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("vocab_size:");
    sb.append(this.vocab_size);
    first = false;
    if (!first) sb.append(", ");
    sb.append("num_tokens:");
    sb.append(this.num_tokens);
    first = false;
    if (!first) sb.append(", ");
    sb.append("fields:");
    if (this.fields == null) {
      sb.append("null");
    } else {
      sb.append(this.fields);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CollectionInfoStandardSchemeFactory implements SchemeFactory {
    public CollectionInfoStandardScheme getScheme() {
      return new CollectionInfoStandardScheme();
    }
  }

  private static class CollectionInfoStandardScheme extends StandardScheme<CollectionInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CollectionInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = ProteusType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NUM_DOCS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.num_docs = iprot.readI64();
              struct.setNum_docsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VOCAB_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.vocab_size = iprot.readI64();
              struct.setVocab_sizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NUM_TOKENS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.num_tokens = iprot.readI64();
              struct.setNum_tokensIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FIELDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list178 = iprot.readListBegin();
                struct.fields = new ArrayList<String>(_list178.size);
                for (int _i179 = 0; _i179 < _list178.size; ++_i179)
                {
                  String _elem180; // optional
                  _elem180 = iprot.readString();
                  struct.fields.add(_elem180);
                }
                iprot.readListEnd();
              }
              struct.setFieldsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CollectionInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NUM_DOCS_FIELD_DESC);
      oprot.writeI64(struct.num_docs);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VOCAB_SIZE_FIELD_DESC);
      oprot.writeI64(struct.vocab_size);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUM_TOKENS_FIELD_DESC);
      oprot.writeI64(struct.num_tokens);
      oprot.writeFieldEnd();
      if (struct.fields != null) {
        oprot.writeFieldBegin(FIELDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.fields.size()));
          for (String _iter181 : struct.fields)
          {
            oprot.writeString(_iter181);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CollectionInfoTupleSchemeFactory implements SchemeFactory {
    public CollectionInfoTupleScheme getScheme() {
      return new CollectionInfoTupleScheme();
    }
  }

  private static class CollectionInfoTupleScheme extends TupleScheme<CollectionInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CollectionInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetType()) {
        optionals.set(0);
      }
      if (struct.isSetNum_docs()) {
        optionals.set(1);
      }
      if (struct.isSetVocab_size()) {
        optionals.set(2);
      }
      if (struct.isSetNum_tokens()) {
        optionals.set(3);
      }
      if (struct.isSetFields()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetNum_docs()) {
        oprot.writeI64(struct.num_docs);
      }
      if (struct.isSetVocab_size()) {
        oprot.writeI64(struct.vocab_size);
      }
      if (struct.isSetNum_tokens()) {
        oprot.writeI64(struct.num_tokens);
      }
      if (struct.isSetFields()) {
        {
          oprot.writeI32(struct.fields.size());
          for (String _iter182 : struct.fields)
          {
            oprot.writeString(_iter182);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CollectionInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.type = ProteusType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.num_docs = iprot.readI64();
        struct.setNum_docsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.vocab_size = iprot.readI64();
        struct.setVocab_sizeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.num_tokens = iprot.readI64();
        struct.setNum_tokensIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list183 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.fields = new ArrayList<String>(_list183.size);
          for (int _i184 = 0; _i184 < _list183.size; ++_i184)
          {
            String _elem185; // optional
            _elem185 = iprot.readString();
            struct.fields.add(_elem185);
          }
        }
        struct.setFieldsIsSet(true);
      }
    }
  }

}

