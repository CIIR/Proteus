/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ciir.proteus.galago.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ProteusObject implements org.apache.thrift.TBase<ProteusObject, ProteusObject._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProteusObject");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField IMG_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("img_url", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField THUMB_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("thumb_url", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField EXTERNAL_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("external_url", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DATE_FREQ_FIELD_DESC = new org.apache.thrift.protocol.TField("date_freq", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField LANGUAGE_MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("language_model", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField LANGUAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("language", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField COLLECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("collection", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("page", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField PICTURE_FIELD_DESC = new org.apache.thrift.protocol.TField("picture", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField VIDEO_FIELD_DESC = new org.apache.thrift.protocol.TField("video", org.apache.thrift.protocol.TType.STRUCT, (short)13);
  private static final org.apache.thrift.protocol.TField AUDIO_FIELD_DESC = new org.apache.thrift.protocol.TField("audio", org.apache.thrift.protocol.TType.STRUCT, (short)14);
  private static final org.apache.thrift.protocol.TField PERSON_FIELD_DESC = new org.apache.thrift.protocol.TField("person", org.apache.thrift.protocol.TType.STRUCT, (short)15);
  private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRUCT, (short)16);
  private static final org.apache.thrift.protocol.TField ORGANIZATION_FIELD_DESC = new org.apache.thrift.protocol.TField("organization", org.apache.thrift.protocol.TType.STRUCT, (short)17);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProteusObjectStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProteusObjectTupleSchemeFactory());
  }

  public AccessIdentifier id; // required
  public String title; // optional
  public String description; // optional
  public String img_url; // optional
  public String thumb_url; // optional
  public String external_url; // optional
  public LongValueList date_freq; // optional
  public TermList language_model; // optional
  public String language; // required
  public Collection collection; // optional
  public Page page; // optional
  public Picture picture; // optional
  public Video video; // optional
  public Audio audio; // optional
  public Person person; // optional
  public Location location; // optional
  public Organization organization; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    TITLE((short)2, "title"),
    DESCRIPTION((short)3, "description"),
    IMG_URL((short)4, "img_url"),
    THUMB_URL((short)5, "thumb_url"),
    EXTERNAL_URL((short)6, "external_url"),
    DATE_FREQ((short)7, "date_freq"),
    LANGUAGE_MODEL((short)8, "language_model"),
    LANGUAGE((short)9, "language"),
    COLLECTION((short)10, "collection"),
    PAGE((short)11, "page"),
    PICTURE((short)12, "picture"),
    VIDEO((short)13, "video"),
    AUDIO((short)14, "audio"),
    PERSON((short)15, "person"),
    LOCATION((short)16, "location"),
    ORGANIZATION((short)17, "organization");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // TITLE
          return TITLE;
        case 3: // DESCRIPTION
          return DESCRIPTION;
        case 4: // IMG_URL
          return IMG_URL;
        case 5: // THUMB_URL
          return THUMB_URL;
        case 6: // EXTERNAL_URL
          return EXTERNAL_URL;
        case 7: // DATE_FREQ
          return DATE_FREQ;
        case 8: // LANGUAGE_MODEL
          return LANGUAGE_MODEL;
        case 9: // LANGUAGE
          return LANGUAGE;
        case 10: // COLLECTION
          return COLLECTION;
        case 11: // PAGE
          return PAGE;
        case 12: // PICTURE
          return PICTURE;
        case 13: // VIDEO
          return VIDEO;
        case 14: // AUDIO
          return AUDIO;
        case 15: // PERSON
          return PERSON;
        case 16: // LOCATION
          return LOCATION;
        case 17: // ORGANIZATION
          return ORGANIZATION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.TITLE,_Fields.DESCRIPTION,_Fields.IMG_URL,_Fields.THUMB_URL,_Fields.EXTERNAL_URL,_Fields.DATE_FREQ,_Fields.LANGUAGE_MODEL,_Fields.COLLECTION,_Fields.PAGE,_Fields.PICTURE,_Fields.VIDEO,_Fields.AUDIO,_Fields.PERSON,_Fields.LOCATION,_Fields.ORGANIZATION};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AccessIdentifier.class)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMG_URL, new org.apache.thrift.meta_data.FieldMetaData("img_url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.THUMB_URL, new org.apache.thrift.meta_data.FieldMetaData("thumb_url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXTERNAL_URL, new org.apache.thrift.meta_data.FieldMetaData("external_url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATE_FREQ, new org.apache.thrift.meta_data.FieldMetaData("date_freq", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LongValueList.class)));
    tmpMap.put(_Fields.LANGUAGE_MODEL, new org.apache.thrift.meta_data.FieldMetaData("language_model", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TermList.class)));
    tmpMap.put(_Fields.LANGUAGE, new org.apache.thrift.meta_data.FieldMetaData("language", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COLLECTION, new org.apache.thrift.meta_data.FieldMetaData("collection", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Collection.class)));
    tmpMap.put(_Fields.PAGE, new org.apache.thrift.meta_data.FieldMetaData("page", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Page.class)));
    tmpMap.put(_Fields.PICTURE, new org.apache.thrift.meta_data.FieldMetaData("picture", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Picture.class)));
    tmpMap.put(_Fields.VIDEO, new org.apache.thrift.meta_data.FieldMetaData("video", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Video.class)));
    tmpMap.put(_Fields.AUDIO, new org.apache.thrift.meta_data.FieldMetaData("audio", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Audio.class)));
    tmpMap.put(_Fields.PERSON, new org.apache.thrift.meta_data.FieldMetaData("person", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Person.class)));
    tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Location.class)));
    tmpMap.put(_Fields.ORGANIZATION, new org.apache.thrift.meta_data.FieldMetaData("organization", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Organization.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProteusObject.class, metaDataMap);
  }

  public ProteusObject() {
    this.language = "en";

  }

  public ProteusObject(
    AccessIdentifier id,
    String language)
  {
    this();
    this.id = id;
    this.language = language;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProteusObject(ProteusObject other) {
    if (other.isSetId()) {
      this.id = new AccessIdentifier(other.id);
    }
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetImg_url()) {
      this.img_url = other.img_url;
    }
    if (other.isSetThumb_url()) {
      this.thumb_url = other.thumb_url;
    }
    if (other.isSetExternal_url()) {
      this.external_url = other.external_url;
    }
    if (other.isSetDate_freq()) {
      this.date_freq = new LongValueList(other.date_freq);
    }
    if (other.isSetLanguage_model()) {
      this.language_model = new TermList(other.language_model);
    }
    if (other.isSetLanguage()) {
      this.language = other.language;
    }
    if (other.isSetCollection()) {
      this.collection = new Collection(other.collection);
    }
    if (other.isSetPage()) {
      this.page = new Page(other.page);
    }
    if (other.isSetPicture()) {
      this.picture = new Picture(other.picture);
    }
    if (other.isSetVideo()) {
      this.video = new Video(other.video);
    }
    if (other.isSetAudio()) {
      this.audio = new Audio(other.audio);
    }
    if (other.isSetPerson()) {
      this.person = new Person(other.person);
    }
    if (other.isSetLocation()) {
      this.location = new Location(other.location);
    }
    if (other.isSetOrganization()) {
      this.organization = new Organization(other.organization);
    }
  }

  public ProteusObject deepCopy() {
    return new ProteusObject(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.title = null;
    this.description = null;
    this.img_url = null;
    this.thumb_url = null;
    this.external_url = null;
    this.date_freq = null;
    this.language_model = null;
    this.language = "en";

    this.collection = null;
    this.page = null;
    this.picture = null;
    this.video = null;
    this.audio = null;
    this.person = null;
    this.location = null;
    this.organization = null;
  }

  public AccessIdentifier getId() {
    return this.id;
  }

  public ProteusObject setId(AccessIdentifier id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getTitle() {
    return this.title;
  }

  public ProteusObject setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getDescription() {
    return this.description;
  }

  public ProteusObject setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public String getImg_url() {
    return this.img_url;
  }

  public ProteusObject setImg_url(String img_url) {
    this.img_url = img_url;
    return this;
  }

  public void unsetImg_url() {
    this.img_url = null;
  }

  /** Returns true if field img_url is set (has been assigned a value) and false otherwise */
  public boolean isSetImg_url() {
    return this.img_url != null;
  }

  public void setImg_urlIsSet(boolean value) {
    if (!value) {
      this.img_url = null;
    }
  }

  public String getThumb_url() {
    return this.thumb_url;
  }

  public ProteusObject setThumb_url(String thumb_url) {
    this.thumb_url = thumb_url;
    return this;
  }

  public void unsetThumb_url() {
    this.thumb_url = null;
  }

  /** Returns true if field thumb_url is set (has been assigned a value) and false otherwise */
  public boolean isSetThumb_url() {
    return this.thumb_url != null;
  }

  public void setThumb_urlIsSet(boolean value) {
    if (!value) {
      this.thumb_url = null;
    }
  }

  public String getExternal_url() {
    return this.external_url;
  }

  public ProteusObject setExternal_url(String external_url) {
    this.external_url = external_url;
    return this;
  }

  public void unsetExternal_url() {
    this.external_url = null;
  }

  /** Returns true if field external_url is set (has been assigned a value) and false otherwise */
  public boolean isSetExternal_url() {
    return this.external_url != null;
  }

  public void setExternal_urlIsSet(boolean value) {
    if (!value) {
      this.external_url = null;
    }
  }

  public LongValueList getDate_freq() {
    return this.date_freq;
  }

  public ProteusObject setDate_freq(LongValueList date_freq) {
    this.date_freq = date_freq;
    return this;
  }

  public void unsetDate_freq() {
    this.date_freq = null;
  }

  /** Returns true if field date_freq is set (has been assigned a value) and false otherwise */
  public boolean isSetDate_freq() {
    return this.date_freq != null;
  }

  public void setDate_freqIsSet(boolean value) {
    if (!value) {
      this.date_freq = null;
    }
  }

  public TermList getLanguage_model() {
    return this.language_model;
  }

  public ProteusObject setLanguage_model(TermList language_model) {
    this.language_model = language_model;
    return this;
  }

  public void unsetLanguage_model() {
    this.language_model = null;
  }

  /** Returns true if field language_model is set (has been assigned a value) and false otherwise */
  public boolean isSetLanguage_model() {
    return this.language_model != null;
  }

  public void setLanguage_modelIsSet(boolean value) {
    if (!value) {
      this.language_model = null;
    }
  }

  public String getLanguage() {
    return this.language;
  }

  public ProteusObject setLanguage(String language) {
    this.language = language;
    return this;
  }

  public void unsetLanguage() {
    this.language = null;
  }

  /** Returns true if field language is set (has been assigned a value) and false otherwise */
  public boolean isSetLanguage() {
    return this.language != null;
  }

  public void setLanguageIsSet(boolean value) {
    if (!value) {
      this.language = null;
    }
  }

  public Collection getCollection() {
    return this.collection;
  }

  public ProteusObject setCollection(Collection collection) {
    this.collection = collection;
    return this;
  }

  public void unsetCollection() {
    this.collection = null;
  }

  /** Returns true if field collection is set (has been assigned a value) and false otherwise */
  public boolean isSetCollection() {
    return this.collection != null;
  }

  public void setCollectionIsSet(boolean value) {
    if (!value) {
      this.collection = null;
    }
  }

  public Page getPage() {
    return this.page;
  }

  public ProteusObject setPage(Page page) {
    this.page = page;
    return this;
  }

  public void unsetPage() {
    this.page = null;
  }

  /** Returns true if field page is set (has been assigned a value) and false otherwise */
  public boolean isSetPage() {
    return this.page != null;
  }

  public void setPageIsSet(boolean value) {
    if (!value) {
      this.page = null;
    }
  }

  public Picture getPicture() {
    return this.picture;
  }

  public ProteusObject setPicture(Picture picture) {
    this.picture = picture;
    return this;
  }

  public void unsetPicture() {
    this.picture = null;
  }

  /** Returns true if field picture is set (has been assigned a value) and false otherwise */
  public boolean isSetPicture() {
    return this.picture != null;
  }

  public void setPictureIsSet(boolean value) {
    if (!value) {
      this.picture = null;
    }
  }

  public Video getVideo() {
    return this.video;
  }

  public ProteusObject setVideo(Video video) {
    this.video = video;
    return this;
  }

  public void unsetVideo() {
    this.video = null;
  }

  /** Returns true if field video is set (has been assigned a value) and false otherwise */
  public boolean isSetVideo() {
    return this.video != null;
  }

  public void setVideoIsSet(boolean value) {
    if (!value) {
      this.video = null;
    }
  }

  public Audio getAudio() {
    return this.audio;
  }

  public ProteusObject setAudio(Audio audio) {
    this.audio = audio;
    return this;
  }

  public void unsetAudio() {
    this.audio = null;
  }

  /** Returns true if field audio is set (has been assigned a value) and false otherwise */
  public boolean isSetAudio() {
    return this.audio != null;
  }

  public void setAudioIsSet(boolean value) {
    if (!value) {
      this.audio = null;
    }
  }

  public Person getPerson() {
    return this.person;
  }

  public ProteusObject setPerson(Person person) {
    this.person = person;
    return this;
  }

  public void unsetPerson() {
    this.person = null;
  }

  /** Returns true if field person is set (has been assigned a value) and false otherwise */
  public boolean isSetPerson() {
    return this.person != null;
  }

  public void setPersonIsSet(boolean value) {
    if (!value) {
      this.person = null;
    }
  }

  public Location getLocation() {
    return this.location;
  }

  public ProteusObject setLocation(Location location) {
    this.location = location;
    return this;
  }

  public void unsetLocation() {
    this.location = null;
  }

  /** Returns true if field location is set (has been assigned a value) and false otherwise */
  public boolean isSetLocation() {
    return this.location != null;
  }

  public void setLocationIsSet(boolean value) {
    if (!value) {
      this.location = null;
    }
  }

  public Organization getOrganization() {
    return this.organization;
  }

  public ProteusObject setOrganization(Organization organization) {
    this.organization = organization;
    return this;
  }

  public void unsetOrganization() {
    this.organization = null;
  }

  /** Returns true if field organization is set (has been assigned a value) and false otherwise */
  public boolean isSetOrganization() {
    return this.organization != null;
  }

  public void setOrganizationIsSet(boolean value) {
    if (!value) {
      this.organization = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((AccessIdentifier)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case IMG_URL:
      if (value == null) {
        unsetImg_url();
      } else {
        setImg_url((String)value);
      }
      break;

    case THUMB_URL:
      if (value == null) {
        unsetThumb_url();
      } else {
        setThumb_url((String)value);
      }
      break;

    case EXTERNAL_URL:
      if (value == null) {
        unsetExternal_url();
      } else {
        setExternal_url((String)value);
      }
      break;

    case DATE_FREQ:
      if (value == null) {
        unsetDate_freq();
      } else {
        setDate_freq((LongValueList)value);
      }
      break;

    case LANGUAGE_MODEL:
      if (value == null) {
        unsetLanguage_model();
      } else {
        setLanguage_model((TermList)value);
      }
      break;

    case LANGUAGE:
      if (value == null) {
        unsetLanguage();
      } else {
        setLanguage((String)value);
      }
      break;

    case COLLECTION:
      if (value == null) {
        unsetCollection();
      } else {
        setCollection((Collection)value);
      }
      break;

    case PAGE:
      if (value == null) {
        unsetPage();
      } else {
        setPage((Page)value);
      }
      break;

    case PICTURE:
      if (value == null) {
        unsetPicture();
      } else {
        setPicture((Picture)value);
      }
      break;

    case VIDEO:
      if (value == null) {
        unsetVideo();
      } else {
        setVideo((Video)value);
      }
      break;

    case AUDIO:
      if (value == null) {
        unsetAudio();
      } else {
        setAudio((Audio)value);
      }
      break;

    case PERSON:
      if (value == null) {
        unsetPerson();
      } else {
        setPerson((Person)value);
      }
      break;

    case LOCATION:
      if (value == null) {
        unsetLocation();
      } else {
        setLocation((Location)value);
      }
      break;

    case ORGANIZATION:
      if (value == null) {
        unsetOrganization();
      } else {
        setOrganization((Organization)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case TITLE:
      return getTitle();

    case DESCRIPTION:
      return getDescription();

    case IMG_URL:
      return getImg_url();

    case THUMB_URL:
      return getThumb_url();

    case EXTERNAL_URL:
      return getExternal_url();

    case DATE_FREQ:
      return getDate_freq();

    case LANGUAGE_MODEL:
      return getLanguage_model();

    case LANGUAGE:
      return getLanguage();

    case COLLECTION:
      return getCollection();

    case PAGE:
      return getPage();

    case PICTURE:
      return getPicture();

    case VIDEO:
      return getVideo();

    case AUDIO:
      return getAudio();

    case PERSON:
      return getPerson();

    case LOCATION:
      return getLocation();

    case ORGANIZATION:
      return getOrganization();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case TITLE:
      return isSetTitle();
    case DESCRIPTION:
      return isSetDescription();
    case IMG_URL:
      return isSetImg_url();
    case THUMB_URL:
      return isSetThumb_url();
    case EXTERNAL_URL:
      return isSetExternal_url();
    case DATE_FREQ:
      return isSetDate_freq();
    case LANGUAGE_MODEL:
      return isSetLanguage_model();
    case LANGUAGE:
      return isSetLanguage();
    case COLLECTION:
      return isSetCollection();
    case PAGE:
      return isSetPage();
    case PICTURE:
      return isSetPicture();
    case VIDEO:
      return isSetVideo();
    case AUDIO:
      return isSetAudio();
    case PERSON:
      return isSetPerson();
    case LOCATION:
      return isSetLocation();
    case ORGANIZATION:
      return isSetOrganization();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProteusObject)
      return this.equals((ProteusObject)that);
    return false;
  }

  public boolean equals(ProteusObject that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_img_url = true && this.isSetImg_url();
    boolean that_present_img_url = true && that.isSetImg_url();
    if (this_present_img_url || that_present_img_url) {
      if (!(this_present_img_url && that_present_img_url))
        return false;
      if (!this.img_url.equals(that.img_url))
        return false;
    }

    boolean this_present_thumb_url = true && this.isSetThumb_url();
    boolean that_present_thumb_url = true && that.isSetThumb_url();
    if (this_present_thumb_url || that_present_thumb_url) {
      if (!(this_present_thumb_url && that_present_thumb_url))
        return false;
      if (!this.thumb_url.equals(that.thumb_url))
        return false;
    }

    boolean this_present_external_url = true && this.isSetExternal_url();
    boolean that_present_external_url = true && that.isSetExternal_url();
    if (this_present_external_url || that_present_external_url) {
      if (!(this_present_external_url && that_present_external_url))
        return false;
      if (!this.external_url.equals(that.external_url))
        return false;
    }

    boolean this_present_date_freq = true && this.isSetDate_freq();
    boolean that_present_date_freq = true && that.isSetDate_freq();
    if (this_present_date_freq || that_present_date_freq) {
      if (!(this_present_date_freq && that_present_date_freq))
        return false;
      if (!this.date_freq.equals(that.date_freq))
        return false;
    }

    boolean this_present_language_model = true && this.isSetLanguage_model();
    boolean that_present_language_model = true && that.isSetLanguage_model();
    if (this_present_language_model || that_present_language_model) {
      if (!(this_present_language_model && that_present_language_model))
        return false;
      if (!this.language_model.equals(that.language_model))
        return false;
    }

    boolean this_present_language = true && this.isSetLanguage();
    boolean that_present_language = true && that.isSetLanguage();
    if (this_present_language || that_present_language) {
      if (!(this_present_language && that_present_language))
        return false;
      if (!this.language.equals(that.language))
        return false;
    }

    boolean this_present_collection = true && this.isSetCollection();
    boolean that_present_collection = true && that.isSetCollection();
    if (this_present_collection || that_present_collection) {
      if (!(this_present_collection && that_present_collection))
        return false;
      if (!this.collection.equals(that.collection))
        return false;
    }

    boolean this_present_page = true && this.isSetPage();
    boolean that_present_page = true && that.isSetPage();
    if (this_present_page || that_present_page) {
      if (!(this_present_page && that_present_page))
        return false;
      if (!this.page.equals(that.page))
        return false;
    }

    boolean this_present_picture = true && this.isSetPicture();
    boolean that_present_picture = true && that.isSetPicture();
    if (this_present_picture || that_present_picture) {
      if (!(this_present_picture && that_present_picture))
        return false;
      if (!this.picture.equals(that.picture))
        return false;
    }

    boolean this_present_video = true && this.isSetVideo();
    boolean that_present_video = true && that.isSetVideo();
    if (this_present_video || that_present_video) {
      if (!(this_present_video && that_present_video))
        return false;
      if (!this.video.equals(that.video))
        return false;
    }

    boolean this_present_audio = true && this.isSetAudio();
    boolean that_present_audio = true && that.isSetAudio();
    if (this_present_audio || that_present_audio) {
      if (!(this_present_audio && that_present_audio))
        return false;
      if (!this.audio.equals(that.audio))
        return false;
    }

    boolean this_present_person = true && this.isSetPerson();
    boolean that_present_person = true && that.isSetPerson();
    if (this_present_person || that_present_person) {
      if (!(this_present_person && that_present_person))
        return false;
      if (!this.person.equals(that.person))
        return false;
    }

    boolean this_present_location = true && this.isSetLocation();
    boolean that_present_location = true && that.isSetLocation();
    if (this_present_location || that_present_location) {
      if (!(this_present_location && that_present_location))
        return false;
      if (!this.location.equals(that.location))
        return false;
    }

    boolean this_present_organization = true && this.isSetOrganization();
    boolean that_present_organization = true && that.isSetOrganization();
    if (this_present_organization || that_present_organization) {
      if (!(this_present_organization && that_present_organization))
        return false;
      if (!this.organization.equals(that.organization))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ProteusObject other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ProteusObject typedOther = (ProteusObject)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(typedOther.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, typedOther.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(typedOther.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, typedOther.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImg_url()).compareTo(typedOther.isSetImg_url());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImg_url()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.img_url, typedOther.img_url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThumb_url()).compareTo(typedOther.isSetThumb_url());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThumb_url()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thumb_url, typedOther.thumb_url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExternal_url()).compareTo(typedOther.isSetExternal_url());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExternal_url()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.external_url, typedOther.external_url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDate_freq()).compareTo(typedOther.isSetDate_freq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate_freq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date_freq, typedOther.date_freq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLanguage_model()).compareTo(typedOther.isSetLanguage_model());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLanguage_model()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.language_model, typedOther.language_model);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLanguage()).compareTo(typedOther.isSetLanguage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLanguage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.language, typedOther.language);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCollection()).compareTo(typedOther.isSetCollection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collection, typedOther.collection);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPage()).compareTo(typedOther.isSetPage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.page, typedOther.page);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPicture()).compareTo(typedOther.isSetPicture());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPicture()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.picture, typedOther.picture);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVideo()).compareTo(typedOther.isSetVideo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVideo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.video, typedOther.video);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAudio()).compareTo(typedOther.isSetAudio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAudio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.audio, typedOther.audio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPerson()).compareTo(typedOther.isSetPerson());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPerson()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.person, typedOther.person);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocation()).compareTo(typedOther.isSetLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, typedOther.location);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrganization()).compareTo(typedOther.isSetOrganization());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrganization()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.organization, typedOther.organization);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProteusObject(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (isSetTitle()) {
      if (!first) sb.append(", ");
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
    }
    if (isSetDescription()) {
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
    }
    if (isSetImg_url()) {
      if (!first) sb.append(", ");
      sb.append("img_url:");
      if (this.img_url == null) {
        sb.append("null");
      } else {
        sb.append(this.img_url);
      }
      first = false;
    }
    if (isSetThumb_url()) {
      if (!first) sb.append(", ");
      sb.append("thumb_url:");
      if (this.thumb_url == null) {
        sb.append("null");
      } else {
        sb.append(this.thumb_url);
      }
      first = false;
    }
    if (isSetExternal_url()) {
      if (!first) sb.append(", ");
      sb.append("external_url:");
      if (this.external_url == null) {
        sb.append("null");
      } else {
        sb.append(this.external_url);
      }
      first = false;
    }
    if (isSetDate_freq()) {
      if (!first) sb.append(", ");
      sb.append("date_freq:");
      if (this.date_freq == null) {
        sb.append("null");
      } else {
        sb.append(this.date_freq);
      }
      first = false;
    }
    if (isSetLanguage_model()) {
      if (!first) sb.append(", ");
      sb.append("language_model:");
      if (this.language_model == null) {
        sb.append("null");
      } else {
        sb.append(this.language_model);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("language:");
    if (this.language == null) {
      sb.append("null");
    } else {
      sb.append(this.language);
    }
    first = false;
    if (isSetCollection()) {
      if (!first) sb.append(", ");
      sb.append("collection:");
      if (this.collection == null) {
        sb.append("null");
      } else {
        sb.append(this.collection);
      }
      first = false;
    }
    if (isSetPage()) {
      if (!first) sb.append(", ");
      sb.append("page:");
      if (this.page == null) {
        sb.append("null");
      } else {
        sb.append(this.page);
      }
      first = false;
    }
    if (isSetPicture()) {
      if (!first) sb.append(", ");
      sb.append("picture:");
      if (this.picture == null) {
        sb.append("null");
      } else {
        sb.append(this.picture);
      }
      first = false;
    }
    if (isSetVideo()) {
      if (!first) sb.append(", ");
      sb.append("video:");
      if (this.video == null) {
        sb.append("null");
      } else {
        sb.append(this.video);
      }
      first = false;
    }
    if (isSetAudio()) {
      if (!first) sb.append(", ");
      sb.append("audio:");
      if (this.audio == null) {
        sb.append("null");
      } else {
        sb.append(this.audio);
      }
      first = false;
    }
    if (isSetPerson()) {
      if (!first) sb.append(", ");
      sb.append("person:");
      if (this.person == null) {
        sb.append("null");
      } else {
        sb.append(this.person);
      }
      first = false;
    }
    if (isSetLocation()) {
      if (!first) sb.append(", ");
      sb.append("location:");
      if (this.location == null) {
        sb.append("null");
      } else {
        sb.append(this.location);
      }
      first = false;
    }
    if (isSetOrganization()) {
      if (!first) sb.append(", ");
      sb.append("organization:");
      if (this.organization == null) {
        sb.append("null");
      } else {
        sb.append(this.organization);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProteusObjectStandardSchemeFactory implements SchemeFactory {
    public ProteusObjectStandardScheme getScheme() {
      return new ProteusObjectStandardScheme();
    }
  }

  private static class ProteusObjectStandardScheme extends StandardScheme<ProteusObject> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProteusObject struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.id = new AccessIdentifier();
              struct.id.read(iprot);
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IMG_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.img_url = iprot.readString();
              struct.setImg_urlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // THUMB_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.thumb_url = iprot.readString();
              struct.setThumb_urlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EXTERNAL_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.external_url = iprot.readString();
              struct.setExternal_urlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DATE_FREQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.date_freq = new LongValueList();
              struct.date_freq.read(iprot);
              struct.setDate_freqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LANGUAGE_MODEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.language_model = new TermList();
              struct.language_model.read(iprot);
              struct.setLanguage_modelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LANGUAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.language = iprot.readString();
              struct.setLanguageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // COLLECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.collection = new Collection();
              struct.collection.read(iprot);
              struct.setCollectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // PAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.page = new Page();
              struct.page.read(iprot);
              struct.setPageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PICTURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.picture = new Picture();
              struct.picture.read(iprot);
              struct.setPictureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // VIDEO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.video = new Video();
              struct.video.read(iprot);
              struct.setVideoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // AUDIO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.audio = new Audio();
              struct.audio.read(iprot);
              struct.setAudioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // PERSON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.person = new Person();
              struct.person.read(iprot);
              struct.setPersonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.location = new Location();
              struct.location.read(iprot);
              struct.setLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // ORGANIZATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.organization = new Organization();
              struct.organization.read(iprot);
              struct.setOrganizationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProteusObject struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        struct.id.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.title != null) {
        if (struct.isSetTitle()) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
      }
      if (struct.description != null) {
        if (struct.isSetDescription()) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
      }
      if (struct.img_url != null) {
        if (struct.isSetImg_url()) {
          oprot.writeFieldBegin(IMG_URL_FIELD_DESC);
          oprot.writeString(struct.img_url);
          oprot.writeFieldEnd();
        }
      }
      if (struct.thumb_url != null) {
        if (struct.isSetThumb_url()) {
          oprot.writeFieldBegin(THUMB_URL_FIELD_DESC);
          oprot.writeString(struct.thumb_url);
          oprot.writeFieldEnd();
        }
      }
      if (struct.external_url != null) {
        if (struct.isSetExternal_url()) {
          oprot.writeFieldBegin(EXTERNAL_URL_FIELD_DESC);
          oprot.writeString(struct.external_url);
          oprot.writeFieldEnd();
        }
      }
      if (struct.date_freq != null) {
        if (struct.isSetDate_freq()) {
          oprot.writeFieldBegin(DATE_FREQ_FIELD_DESC);
          struct.date_freq.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.language_model != null) {
        if (struct.isSetLanguage_model()) {
          oprot.writeFieldBegin(LANGUAGE_MODEL_FIELD_DESC);
          struct.language_model.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.language != null) {
        oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
        oprot.writeString(struct.language);
        oprot.writeFieldEnd();
      }
      if (struct.collection != null) {
        if (struct.isSetCollection()) {
          oprot.writeFieldBegin(COLLECTION_FIELD_DESC);
          struct.collection.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.page != null) {
        if (struct.isSetPage()) {
          oprot.writeFieldBegin(PAGE_FIELD_DESC);
          struct.page.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.picture != null) {
        if (struct.isSetPicture()) {
          oprot.writeFieldBegin(PICTURE_FIELD_DESC);
          struct.picture.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.video != null) {
        if (struct.isSetVideo()) {
          oprot.writeFieldBegin(VIDEO_FIELD_DESC);
          struct.video.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.audio != null) {
        if (struct.isSetAudio()) {
          oprot.writeFieldBegin(AUDIO_FIELD_DESC);
          struct.audio.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.person != null) {
        if (struct.isSetPerson()) {
          oprot.writeFieldBegin(PERSON_FIELD_DESC);
          struct.person.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.location != null) {
        if (struct.isSetLocation()) {
          oprot.writeFieldBegin(LOCATION_FIELD_DESC);
          struct.location.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.organization != null) {
        if (struct.isSetOrganization()) {
          oprot.writeFieldBegin(ORGANIZATION_FIELD_DESC);
          struct.organization.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProteusObjectTupleSchemeFactory implements SchemeFactory {
    public ProteusObjectTupleScheme getScheme() {
      return new ProteusObjectTupleScheme();
    }
  }

  private static class ProteusObjectTupleScheme extends TupleScheme<ProteusObject> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProteusObject struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetTitle()) {
        optionals.set(1);
      }
      if (struct.isSetDescription()) {
        optionals.set(2);
      }
      if (struct.isSetImg_url()) {
        optionals.set(3);
      }
      if (struct.isSetThumb_url()) {
        optionals.set(4);
      }
      if (struct.isSetExternal_url()) {
        optionals.set(5);
      }
      if (struct.isSetDate_freq()) {
        optionals.set(6);
      }
      if (struct.isSetLanguage_model()) {
        optionals.set(7);
      }
      if (struct.isSetLanguage()) {
        optionals.set(8);
      }
      if (struct.isSetCollection()) {
        optionals.set(9);
      }
      if (struct.isSetPage()) {
        optionals.set(10);
      }
      if (struct.isSetPicture()) {
        optionals.set(11);
      }
      if (struct.isSetVideo()) {
        optionals.set(12);
      }
      if (struct.isSetAudio()) {
        optionals.set(13);
      }
      if (struct.isSetPerson()) {
        optionals.set(14);
      }
      if (struct.isSetLocation()) {
        optionals.set(15);
      }
      if (struct.isSetOrganization()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetId()) {
        struct.id.write(oprot);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetImg_url()) {
        oprot.writeString(struct.img_url);
      }
      if (struct.isSetThumb_url()) {
        oprot.writeString(struct.thumb_url);
      }
      if (struct.isSetExternal_url()) {
        oprot.writeString(struct.external_url);
      }
      if (struct.isSetDate_freq()) {
        struct.date_freq.write(oprot);
      }
      if (struct.isSetLanguage_model()) {
        struct.language_model.write(oprot);
      }
      if (struct.isSetLanguage()) {
        oprot.writeString(struct.language);
      }
      if (struct.isSetCollection()) {
        struct.collection.write(oprot);
      }
      if (struct.isSetPage()) {
        struct.page.write(oprot);
      }
      if (struct.isSetPicture()) {
        struct.picture.write(oprot);
      }
      if (struct.isSetVideo()) {
        struct.video.write(oprot);
      }
      if (struct.isSetAudio()) {
        struct.audio.write(oprot);
      }
      if (struct.isSetPerson()) {
        struct.person.write(oprot);
      }
      if (struct.isSetLocation()) {
        struct.location.write(oprot);
      }
      if (struct.isSetOrganization()) {
        struct.organization.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProteusObject struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.id = new AccessIdentifier();
        struct.id.read(iprot);
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(2)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.img_url = iprot.readString();
        struct.setImg_urlIsSet(true);
      }
      if (incoming.get(4)) {
        struct.thumb_url = iprot.readString();
        struct.setThumb_urlIsSet(true);
      }
      if (incoming.get(5)) {
        struct.external_url = iprot.readString();
        struct.setExternal_urlIsSet(true);
      }
      if (incoming.get(6)) {
        struct.date_freq = new LongValueList();
        struct.date_freq.read(iprot);
        struct.setDate_freqIsSet(true);
      }
      if (incoming.get(7)) {
        struct.language_model = new TermList();
        struct.language_model.read(iprot);
        struct.setLanguage_modelIsSet(true);
      }
      if (incoming.get(8)) {
        struct.language = iprot.readString();
        struct.setLanguageIsSet(true);
      }
      if (incoming.get(9)) {
        struct.collection = new Collection();
        struct.collection.read(iprot);
        struct.setCollectionIsSet(true);
      }
      if (incoming.get(10)) {
        struct.page = new Page();
        struct.page.read(iprot);
        struct.setPageIsSet(true);
      }
      if (incoming.get(11)) {
        struct.picture = new Picture();
        struct.picture.read(iprot);
        struct.setPictureIsSet(true);
      }
      if (incoming.get(12)) {
        struct.video = new Video();
        struct.video.read(iprot);
        struct.setVideoIsSet(true);
      }
      if (incoming.get(13)) {
        struct.audio = new Audio();
        struct.audio.read(iprot);
        struct.setAudioIsSet(true);
      }
      if (incoming.get(14)) {
        struct.person = new Person();
        struct.person.read(iprot);
        struct.setPersonIsSet(true);
      }
      if (incoming.get(15)) {
        struct.location = new Location();
        struct.location.read(iprot);
        struct.setLocationIsSet(true);
      }
      if (incoming.get(16)) {
        struct.organization = new Organization();
        struct.organization.read(iprot);
        struct.setOrganizationIsSet(true);
      }
    }
  }

}

