- import ciir.proteus.ProteusFunctions._
-@ val results : Map[String, Any] = Map[String, Any]()
-@ val q : String = ""
-@ val error : String = ""
.container-fluid
 .row-fluid
  .span12
   %form.well.form-search#searchform{:method => "get", :action => "search"}
    %table
     %tr
      %td
       %input.input-medium.search-query#q{:type => "text", :name => "q",
       					  :value=> {q}}
       %button.btn.btn-primary{:type => "submit"} Search
      %td
       %span Types to find:
      %td
       %span.btn-group#typeselection(data-toggle="buttons-checkbox")
        - for (retType <- kReturnableTypes.sorted)
         %button.btn(type="button" name="#{retType}") 
          = pluralDisplayName(retType)
        %button.btn{:type => "button", :name => "all" } All
  %script{:src => "assets/js/proteus/search-validate.js"}
 -# This either renders an error or the result page. Not both.
 %br
 - if (!error.isEmpty)
  = render("error.scaml", Map("error" -> error))
 - else if (!results.isEmpty)
  = render("results.scaml", Map("results" -> results))