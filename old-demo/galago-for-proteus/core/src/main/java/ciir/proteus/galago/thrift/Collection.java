/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ciir.proteus.galago.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Collection implements org.apache.thrift.TBase<Collection, Collection._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Collection");

  private static final org.apache.thrift.protocol.TField PUBLICATION_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("publication_date", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField PUBLISHER_FIELD_DESC = new org.apache.thrift.protocol.TField("publisher", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField EDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("edition", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField NUM_PAGES_FIELD_DESC = new org.apache.thrift.protocol.TField("num_pages", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField CREATORS_FIELD_DESC = new org.apache.thrift.protocol.TField("creators", org.apache.thrift.protocol.TType.LIST, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CollectionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CollectionTupleSchemeFactory());
  }

  public long publication_date; // optional
  public String publisher; // optional
  public String edition; // optional
  public int num_pages; // optional
  public List<String> creators; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PUBLICATION_DATE((short)1, "publication_date"),
    PUBLISHER((short)2, "publisher"),
    EDITION((short)3, "edition"),
    NUM_PAGES((short)4, "num_pages"),
    CREATORS((short)5, "creators");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PUBLICATION_DATE
          return PUBLICATION_DATE;
        case 2: // PUBLISHER
          return PUBLISHER;
        case 3: // EDITION
          return EDITION;
        case 4: // NUM_PAGES
          return NUM_PAGES;
        case 5: // CREATORS
          return CREATORS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PUBLICATION_DATE_ISSET_ID = 0;
  private static final int __NUM_PAGES_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);
  private _Fields optionals[] = {_Fields.PUBLICATION_DATE,_Fields.PUBLISHER,_Fields.EDITION,_Fields.NUM_PAGES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PUBLICATION_DATE, new org.apache.thrift.meta_data.FieldMetaData("publication_date", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PUBLISHER, new org.apache.thrift.meta_data.FieldMetaData("publisher", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EDITION, new org.apache.thrift.meta_data.FieldMetaData("edition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUM_PAGES, new org.apache.thrift.meta_data.FieldMetaData("num_pages", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATORS, new org.apache.thrift.meta_data.FieldMetaData("creators", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Collection.class, metaDataMap);
  }

  public Collection() {
  }

  public Collection(
    List<String> creators)
  {
    this();
    this.creators = creators;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Collection(Collection other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.publication_date = other.publication_date;
    if (other.isSetPublisher()) {
      this.publisher = other.publisher;
    }
    if (other.isSetEdition()) {
      this.edition = other.edition;
    }
    this.num_pages = other.num_pages;
    if (other.isSetCreators()) {
      List<String> __this__creators = new ArrayList<String>();
      for (String other_element : other.creators) {
        __this__creators.add(other_element);
      }
      this.creators = __this__creators;
    }
  }

  public Collection deepCopy() {
    return new Collection(this);
  }

  @Override
  public void clear() {
    setPublication_dateIsSet(false);
    this.publication_date = 0;
    this.publisher = null;
    this.edition = null;
    setNum_pagesIsSet(false);
    this.num_pages = 0;
    this.creators = null;
  }

  public long getPublication_date() {
    return this.publication_date;
  }

  public Collection setPublication_date(long publication_date) {
    this.publication_date = publication_date;
    setPublication_dateIsSet(true);
    return this;
  }

  public void unsetPublication_date() {
    __isset_bit_vector.clear(__PUBLICATION_DATE_ISSET_ID);
  }

  /** Returns true if field publication_date is set (has been assigned a value) and false otherwise */
  public boolean isSetPublication_date() {
    return __isset_bit_vector.get(__PUBLICATION_DATE_ISSET_ID);
  }

  public void setPublication_dateIsSet(boolean value) {
    __isset_bit_vector.set(__PUBLICATION_DATE_ISSET_ID, value);
  }

  public String getPublisher() {
    return this.publisher;
  }

  public Collection setPublisher(String publisher) {
    this.publisher = publisher;
    return this;
  }

  public void unsetPublisher() {
    this.publisher = null;
  }

  /** Returns true if field publisher is set (has been assigned a value) and false otherwise */
  public boolean isSetPublisher() {
    return this.publisher != null;
  }

  public void setPublisherIsSet(boolean value) {
    if (!value) {
      this.publisher = null;
    }
  }

  public String getEdition() {
    return this.edition;
  }

  public Collection setEdition(String edition) {
    this.edition = edition;
    return this;
  }

  public void unsetEdition() {
    this.edition = null;
  }

  /** Returns true if field edition is set (has been assigned a value) and false otherwise */
  public boolean isSetEdition() {
    return this.edition != null;
  }

  public void setEditionIsSet(boolean value) {
    if (!value) {
      this.edition = null;
    }
  }

  public int getNum_pages() {
    return this.num_pages;
  }

  public Collection setNum_pages(int num_pages) {
    this.num_pages = num_pages;
    setNum_pagesIsSet(true);
    return this;
  }

  public void unsetNum_pages() {
    __isset_bit_vector.clear(__NUM_PAGES_ISSET_ID);
  }

  /** Returns true if field num_pages is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_pages() {
    return __isset_bit_vector.get(__NUM_PAGES_ISSET_ID);
  }

  public void setNum_pagesIsSet(boolean value) {
    __isset_bit_vector.set(__NUM_PAGES_ISSET_ID, value);
  }

  public int getCreatorsSize() {
    return (this.creators == null) ? 0 : this.creators.size();
  }

  public java.util.Iterator<String> getCreatorsIterator() {
    return (this.creators == null) ? null : this.creators.iterator();
  }

  public void addToCreators(String elem) {
    if (this.creators == null) {
      this.creators = new ArrayList<String>();
    }
    this.creators.add(elem);
  }

  public List<String> getCreators() {
    return this.creators;
  }

  public Collection setCreators(List<String> creators) {
    this.creators = creators;
    return this;
  }

  public void unsetCreators() {
    this.creators = null;
  }

  /** Returns true if field creators is set (has been assigned a value) and false otherwise */
  public boolean isSetCreators() {
    return this.creators != null;
  }

  public void setCreatorsIsSet(boolean value) {
    if (!value) {
      this.creators = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PUBLICATION_DATE:
      if (value == null) {
        unsetPublication_date();
      } else {
        setPublication_date((Long)value);
      }
      break;

    case PUBLISHER:
      if (value == null) {
        unsetPublisher();
      } else {
        setPublisher((String)value);
      }
      break;

    case EDITION:
      if (value == null) {
        unsetEdition();
      } else {
        setEdition((String)value);
      }
      break;

    case NUM_PAGES:
      if (value == null) {
        unsetNum_pages();
      } else {
        setNum_pages((Integer)value);
      }
      break;

    case CREATORS:
      if (value == null) {
        unsetCreators();
      } else {
        setCreators((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PUBLICATION_DATE:
      return Long.valueOf(getPublication_date());

    case PUBLISHER:
      return getPublisher();

    case EDITION:
      return getEdition();

    case NUM_PAGES:
      return Integer.valueOf(getNum_pages());

    case CREATORS:
      return getCreators();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PUBLICATION_DATE:
      return isSetPublication_date();
    case PUBLISHER:
      return isSetPublisher();
    case EDITION:
      return isSetEdition();
    case NUM_PAGES:
      return isSetNum_pages();
    case CREATORS:
      return isSetCreators();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Collection)
      return this.equals((Collection)that);
    return false;
  }

  public boolean equals(Collection that) {
    if (that == null)
      return false;

    boolean this_present_publication_date = true && this.isSetPublication_date();
    boolean that_present_publication_date = true && that.isSetPublication_date();
    if (this_present_publication_date || that_present_publication_date) {
      if (!(this_present_publication_date && that_present_publication_date))
        return false;
      if (this.publication_date != that.publication_date)
        return false;
    }

    boolean this_present_publisher = true && this.isSetPublisher();
    boolean that_present_publisher = true && that.isSetPublisher();
    if (this_present_publisher || that_present_publisher) {
      if (!(this_present_publisher && that_present_publisher))
        return false;
      if (!this.publisher.equals(that.publisher))
        return false;
    }

    boolean this_present_edition = true && this.isSetEdition();
    boolean that_present_edition = true && that.isSetEdition();
    if (this_present_edition || that_present_edition) {
      if (!(this_present_edition && that_present_edition))
        return false;
      if (!this.edition.equals(that.edition))
        return false;
    }

    boolean this_present_num_pages = true && this.isSetNum_pages();
    boolean that_present_num_pages = true && that.isSetNum_pages();
    if (this_present_num_pages || that_present_num_pages) {
      if (!(this_present_num_pages && that_present_num_pages))
        return false;
      if (this.num_pages != that.num_pages)
        return false;
    }

    boolean this_present_creators = true && this.isSetCreators();
    boolean that_present_creators = true && that.isSetCreators();
    if (this_present_creators || that_present_creators) {
      if (!(this_present_creators && that_present_creators))
        return false;
      if (!this.creators.equals(that.creators))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Collection other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Collection typedOther = (Collection)other;

    lastComparison = Boolean.valueOf(isSetPublication_date()).compareTo(typedOther.isSetPublication_date());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublication_date()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publication_date, typedOther.publication_date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPublisher()).compareTo(typedOther.isSetPublisher());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublisher()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publisher, typedOther.publisher);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEdition()).compareTo(typedOther.isSetEdition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEdition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.edition, typedOther.edition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_pages()).compareTo(typedOther.isSetNum_pages());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_pages()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_pages, typedOther.num_pages);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreators()).compareTo(typedOther.isSetCreators());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreators()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creators, typedOther.creators);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Collection(");
    boolean first = true;

    if (isSetPublication_date()) {
      sb.append("publication_date:");
      sb.append(this.publication_date);
      first = false;
    }
    if (isSetPublisher()) {
      if (!first) sb.append(", ");
      sb.append("publisher:");
      if (this.publisher == null) {
        sb.append("null");
      } else {
        sb.append(this.publisher);
      }
      first = false;
    }
    if (isSetEdition()) {
      if (!first) sb.append(", ");
      sb.append("edition:");
      if (this.edition == null) {
        sb.append("null");
      } else {
        sb.append(this.edition);
      }
      first = false;
    }
    if (isSetNum_pages()) {
      if (!first) sb.append(", ");
      sb.append("num_pages:");
      sb.append(this.num_pages);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("creators:");
    if (this.creators == null) {
      sb.append("null");
    } else {
      sb.append(this.creators);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CollectionStandardSchemeFactory implements SchemeFactory {
    public CollectionStandardScheme getScheme() {
      return new CollectionStandardScheme();
    }
  }

  private static class CollectionStandardScheme extends StandardScheme<Collection> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Collection struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PUBLICATION_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.publication_date = iprot.readI64();
              struct.setPublication_dateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PUBLISHER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.publisher = iprot.readString();
              struct.setPublisherIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EDITION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.edition = iprot.readString();
              struct.setEditionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NUM_PAGES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_pages = iprot.readI32();
              struct.setNum_pagesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CREATORS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list74 = iprot.readListBegin();
                struct.creators = new ArrayList<String>(_list74.size);
                for (int _i75 = 0; _i75 < _list74.size; ++_i75)
                {
                  String _elem76; // optional
                  _elem76 = iprot.readString();
                  struct.creators.add(_elem76);
                }
                iprot.readListEnd();
              }
              struct.setCreatorsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Collection struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetPublication_date()) {
        oprot.writeFieldBegin(PUBLICATION_DATE_FIELD_DESC);
        oprot.writeI64(struct.publication_date);
        oprot.writeFieldEnd();
      }
      if (struct.publisher != null) {
        if (struct.isSetPublisher()) {
          oprot.writeFieldBegin(PUBLISHER_FIELD_DESC);
          oprot.writeString(struct.publisher);
          oprot.writeFieldEnd();
        }
      }
      if (struct.edition != null) {
        if (struct.isSetEdition()) {
          oprot.writeFieldBegin(EDITION_FIELD_DESC);
          oprot.writeString(struct.edition);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetNum_pages()) {
        oprot.writeFieldBegin(NUM_PAGES_FIELD_DESC);
        oprot.writeI32(struct.num_pages);
        oprot.writeFieldEnd();
      }
      if (struct.creators != null) {
        oprot.writeFieldBegin(CREATORS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.creators.size()));
          for (String _iter77 : struct.creators)
          {
            oprot.writeString(_iter77);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CollectionTupleSchemeFactory implements SchemeFactory {
    public CollectionTupleScheme getScheme() {
      return new CollectionTupleScheme();
    }
  }

  private static class CollectionTupleScheme extends TupleScheme<Collection> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Collection struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPublication_date()) {
        optionals.set(0);
      }
      if (struct.isSetPublisher()) {
        optionals.set(1);
      }
      if (struct.isSetEdition()) {
        optionals.set(2);
      }
      if (struct.isSetNum_pages()) {
        optionals.set(3);
      }
      if (struct.isSetCreators()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetPublication_date()) {
        oprot.writeI64(struct.publication_date);
      }
      if (struct.isSetPublisher()) {
        oprot.writeString(struct.publisher);
      }
      if (struct.isSetEdition()) {
        oprot.writeString(struct.edition);
      }
      if (struct.isSetNum_pages()) {
        oprot.writeI32(struct.num_pages);
      }
      if (struct.isSetCreators()) {
        {
          oprot.writeI32(struct.creators.size());
          for (String _iter78 : struct.creators)
          {
            oprot.writeString(_iter78);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Collection struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.publication_date = iprot.readI64();
        struct.setPublication_dateIsSet(true);
      }
      if (incoming.get(1)) {
        struct.publisher = iprot.readString();
        struct.setPublisherIsSet(true);
      }
      if (incoming.get(2)) {
        struct.edition = iprot.readString();
        struct.setEditionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.num_pages = iprot.readI32();
        struct.setNum_pagesIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list79 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.creators = new ArrayList<String>(_list79.size);
          for (int _i80 = 0; _i80 < _list79.size; ++_i80)
          {
            String _elem81; // optional
            _elem81 = iprot.readString();
            struct.creators.add(_elem81);
          }
        }
        struct.setCreatorsIsSet(true);
      }
    }
  }

}

