/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ciir.proteus.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class KeywordsInContext implements org.apache.thrift.TBase<KeywordsInContext, KeywordsInContext._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("KeywordsInContext");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField TEXT_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("text_content", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField EXTERNAL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("external_id", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new KeywordsInContextStandardSchemeFactory());
    schemes.put(TupleScheme.class, new KeywordsInContextTupleSchemeFactory());
  }

  public AccessIdentifier id; // required
  public String text_content; // required
  public String external_id; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    TEXT_CONTENT((short)2, "text_content"),
    EXTERNAL_ID((short)3, "external_id");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // TEXT_CONTENT
          return TEXT_CONTENT;
        case 3: // EXTERNAL_ID
          return EXTERNAL_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AccessIdentifier.class)));
    tmpMap.put(_Fields.TEXT_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("text_content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXTERNAL_ID, new org.apache.thrift.meta_data.FieldMetaData("external_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(KeywordsInContext.class, metaDataMap);
  }

  public KeywordsInContext() {
  }

  public KeywordsInContext(
    AccessIdentifier id,
    String text_content,
    String external_id)
  {
    this();
    this.id = id;
    this.text_content = text_content;
    this.external_id = external_id;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public KeywordsInContext(KeywordsInContext other) {
    if (other.isSetId()) {
      this.id = new AccessIdentifier(other.id);
    }
    if (other.isSetText_content()) {
      this.text_content = other.text_content;
    }
    if (other.isSetExternal_id()) {
      this.external_id = other.external_id;
    }
  }

  public KeywordsInContext deepCopy() {
    return new KeywordsInContext(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.text_content = null;
    this.external_id = null;
  }

  public AccessIdentifier getId() {
    return this.id;
  }

  public KeywordsInContext setId(AccessIdentifier id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getText_content() {
    return this.text_content;
  }

  public KeywordsInContext setText_content(String text_content) {
    this.text_content = text_content;
    return this;
  }

  public void unsetText_content() {
    this.text_content = null;
  }

  /** Returns true if field text_content is set (has been assigned a value) and false otherwise */
  public boolean isSetText_content() {
    return this.text_content != null;
  }

  public void setText_contentIsSet(boolean value) {
    if (!value) {
      this.text_content = null;
    }
  }

  public String getExternal_id() {
    return this.external_id;
  }

  public KeywordsInContext setExternal_id(String external_id) {
    this.external_id = external_id;
    return this;
  }

  public void unsetExternal_id() {
    this.external_id = null;
  }

  /** Returns true if field external_id is set (has been assigned a value) and false otherwise */
  public boolean isSetExternal_id() {
    return this.external_id != null;
  }

  public void setExternal_idIsSet(boolean value) {
    if (!value) {
      this.external_id = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((AccessIdentifier)value);
      }
      break;

    case TEXT_CONTENT:
      if (value == null) {
        unsetText_content();
      } else {
        setText_content((String)value);
      }
      break;

    case EXTERNAL_ID:
      if (value == null) {
        unsetExternal_id();
      } else {
        setExternal_id((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case TEXT_CONTENT:
      return getText_content();

    case EXTERNAL_ID:
      return getExternal_id();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case TEXT_CONTENT:
      return isSetText_content();
    case EXTERNAL_ID:
      return isSetExternal_id();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof KeywordsInContext)
      return this.equals((KeywordsInContext)that);
    return false;
  }

  public boolean equals(KeywordsInContext that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_text_content = true && this.isSetText_content();
    boolean that_present_text_content = true && that.isSetText_content();
    if (this_present_text_content || that_present_text_content) {
      if (!(this_present_text_content && that_present_text_content))
        return false;
      if (!this.text_content.equals(that.text_content))
        return false;
    }

    boolean this_present_external_id = true && this.isSetExternal_id();
    boolean that_present_external_id = true && that.isSetExternal_id();
    if (this_present_external_id || that_present_external_id) {
      if (!(this_present_external_id && that_present_external_id))
        return false;
      if (!this.external_id.equals(that.external_id))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_id = true && (isSetId());
    builder.append(present_id);
    if (present_id)
      builder.append(id);

    boolean present_text_content = true && (isSetText_content());
    builder.append(present_text_content);
    if (present_text_content)
      builder.append(text_content);

    boolean present_external_id = true && (isSetExternal_id());
    builder.append(present_external_id);
    if (present_external_id)
      builder.append(external_id);

    return builder.toHashCode();
  }

  public int compareTo(KeywordsInContext other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    KeywordsInContext typedOther = (KeywordsInContext)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetText_content()).compareTo(typedOther.isSetText_content());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetText_content()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.text_content, typedOther.text_content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExternal_id()).compareTo(typedOther.isSetExternal_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExternal_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.external_id, typedOther.external_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("KeywordsInContext(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("text_content:");
    if (this.text_content == null) {
      sb.append("null");
    } else {
      sb.append(this.text_content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("external_id:");
    if (this.external_id == null) {
      sb.append("null");
    } else {
      sb.append(this.external_id);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (id != null) {
      id.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class KeywordsInContextStandardSchemeFactory implements SchemeFactory {
    public KeywordsInContextStandardScheme getScheme() {
      return new KeywordsInContextStandardScheme();
    }
  }

  private static class KeywordsInContextStandardScheme extends StandardScheme<KeywordsInContext> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, KeywordsInContext struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.id = new AccessIdentifier();
              struct.id.read(iprot);
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TEXT_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.text_content = iprot.readString();
              struct.setText_contentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXTERNAL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.external_id = iprot.readString();
              struct.setExternal_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, KeywordsInContext struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        struct.id.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.text_content != null) {
        oprot.writeFieldBegin(TEXT_CONTENT_FIELD_DESC);
        oprot.writeString(struct.text_content);
        oprot.writeFieldEnd();
      }
      if (struct.external_id != null) {
        oprot.writeFieldBegin(EXTERNAL_ID_FIELD_DESC);
        oprot.writeString(struct.external_id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class KeywordsInContextTupleSchemeFactory implements SchemeFactory {
    public KeywordsInContextTupleScheme getScheme() {
      return new KeywordsInContextTupleScheme();
    }
  }

  private static class KeywordsInContextTupleScheme extends TupleScheme<KeywordsInContext> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, KeywordsInContext struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetText_content()) {
        optionals.set(1);
      }
      if (struct.isSetExternal_id()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetId()) {
        struct.id.write(oprot);
      }
      if (struct.isSetText_content()) {
        oprot.writeString(struct.text_content);
      }
      if (struct.isSetExternal_id()) {
        oprot.writeString(struct.external_id);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, KeywordsInContext struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.id = new AccessIdentifier();
        struct.id.read(iprot);
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.text_content = iprot.readString();
        struct.setText_contentIsSet(true);
      }
      if (incoming.get(2)) {
        struct.external_id = iprot.readString();
        struct.setExternal_idIsSet(true);
      }
    }
  }

}

