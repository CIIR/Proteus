/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ciir.proteus.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class WikipediaEntity implements org.apache.thrift.TBase<WikipediaEntity, WikipediaEntity._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WikipediaEntity");

  private static final org.apache.thrift.protocol.TField WIKIPEDIA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("wikipedia_id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DISPLAY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("display_name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField EXTERNAL_LINK_FIELD_DESC = new org.apache.thrift.protocol.TField("external_link", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField IMAGE_LINKS_FIELD_DESC = new org.apache.thrift.protocol.TField("image_links", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField RDF_TRIPLES_FIELD_DESC = new org.apache.thrift.protocol.TField("rdf_triples", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField NUM_MENTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_mentions", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new WikipediaEntityStandardSchemeFactory());
    schemes.put(TupleScheme.class, new WikipediaEntityTupleSchemeFactory());
  }

  public String wikipedia_id; // required
  public String display_name; // required
  public String external_link; // required
  public List<String> image_links; // required
  public String rdf_triples; // optional
  public int num_mentions; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    WIKIPEDIA_ID((short)1, "wikipedia_id"),
    DISPLAY_NAME((short)2, "display_name"),
    EXTERNAL_LINK((short)3, "external_link"),
    IMAGE_LINKS((short)4, "image_links"),
    RDF_TRIPLES((short)5, "rdf_triples"),
    NUM_MENTIONS((short)6, "num_mentions");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // WIKIPEDIA_ID
          return WIKIPEDIA_ID;
        case 2: // DISPLAY_NAME
          return DISPLAY_NAME;
        case 3: // EXTERNAL_LINK
          return EXTERNAL_LINK;
        case 4: // IMAGE_LINKS
          return IMAGE_LINKS;
        case 5: // RDF_TRIPLES
          return RDF_TRIPLES;
        case 6: // NUM_MENTIONS
          return NUM_MENTIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUM_MENTIONS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.RDF_TRIPLES,_Fields.NUM_MENTIONS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.WIKIPEDIA_ID, new org.apache.thrift.meta_data.FieldMetaData("wikipedia_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISPLAY_NAME, new org.apache.thrift.meta_data.FieldMetaData("display_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXTERNAL_LINK, new org.apache.thrift.meta_data.FieldMetaData("external_link", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMAGE_LINKS, new org.apache.thrift.meta_data.FieldMetaData("image_links", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.RDF_TRIPLES, new org.apache.thrift.meta_data.FieldMetaData("rdf_triples", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUM_MENTIONS, new org.apache.thrift.meta_data.FieldMetaData("num_mentions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WikipediaEntity.class, metaDataMap);
  }

  public WikipediaEntity() {
  }

  public WikipediaEntity(
    String wikipedia_id,
    String display_name,
    String external_link,
    List<String> image_links)
  {
    this();
    this.wikipedia_id = wikipedia_id;
    this.display_name = display_name;
    this.external_link = external_link;
    this.image_links = image_links;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WikipediaEntity(WikipediaEntity other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetWikipedia_id()) {
      this.wikipedia_id = other.wikipedia_id;
    }
    if (other.isSetDisplay_name()) {
      this.display_name = other.display_name;
    }
    if (other.isSetExternal_link()) {
      this.external_link = other.external_link;
    }
    if (other.isSetImage_links()) {
      List<String> __this__image_links = new ArrayList<String>();
      for (String other_element : other.image_links) {
        __this__image_links.add(other_element);
      }
      this.image_links = __this__image_links;
    }
    if (other.isSetRdf_triples()) {
      this.rdf_triples = other.rdf_triples;
    }
    this.num_mentions = other.num_mentions;
  }

  public WikipediaEntity deepCopy() {
    return new WikipediaEntity(this);
  }

  @Override
  public void clear() {
    this.wikipedia_id = null;
    this.display_name = null;
    this.external_link = null;
    this.image_links = null;
    this.rdf_triples = null;
    setNum_mentionsIsSet(false);
    this.num_mentions = 0;
  }

  public String getWikipedia_id() {
    return this.wikipedia_id;
  }

  public WikipediaEntity setWikipedia_id(String wikipedia_id) {
    this.wikipedia_id = wikipedia_id;
    return this;
  }

  public void unsetWikipedia_id() {
    this.wikipedia_id = null;
  }

  /** Returns true if field wikipedia_id is set (has been assigned a value) and false otherwise */
  public boolean isSetWikipedia_id() {
    return this.wikipedia_id != null;
  }

  public void setWikipedia_idIsSet(boolean value) {
    if (!value) {
      this.wikipedia_id = null;
    }
  }

  public String getDisplay_name() {
    return this.display_name;
  }

  public WikipediaEntity setDisplay_name(String display_name) {
    this.display_name = display_name;
    return this;
  }

  public void unsetDisplay_name() {
    this.display_name = null;
  }

  /** Returns true if field display_name is set (has been assigned a value) and false otherwise */
  public boolean isSetDisplay_name() {
    return this.display_name != null;
  }

  public void setDisplay_nameIsSet(boolean value) {
    if (!value) {
      this.display_name = null;
    }
  }

  public String getExternal_link() {
    return this.external_link;
  }

  public WikipediaEntity setExternal_link(String external_link) {
    this.external_link = external_link;
    return this;
  }

  public void unsetExternal_link() {
    this.external_link = null;
  }

  /** Returns true if field external_link is set (has been assigned a value) and false otherwise */
  public boolean isSetExternal_link() {
    return this.external_link != null;
  }

  public void setExternal_linkIsSet(boolean value) {
    if (!value) {
      this.external_link = null;
    }
  }

  public int getImage_linksSize() {
    return (this.image_links == null) ? 0 : this.image_links.size();
  }

  public java.util.Iterator<String> getImage_linksIterator() {
    return (this.image_links == null) ? null : this.image_links.iterator();
  }

  public void addToImage_links(String elem) {
    if (this.image_links == null) {
      this.image_links = new ArrayList<String>();
    }
    this.image_links.add(elem);
  }

  public List<String> getImage_links() {
    return this.image_links;
  }

  public WikipediaEntity setImage_links(List<String> image_links) {
    this.image_links = image_links;
    return this;
  }

  public void unsetImage_links() {
    this.image_links = null;
  }

  /** Returns true if field image_links is set (has been assigned a value) and false otherwise */
  public boolean isSetImage_links() {
    return this.image_links != null;
  }

  public void setImage_linksIsSet(boolean value) {
    if (!value) {
      this.image_links = null;
    }
  }

  public String getRdf_triples() {
    return this.rdf_triples;
  }

  public WikipediaEntity setRdf_triples(String rdf_triples) {
    this.rdf_triples = rdf_triples;
    return this;
  }

  public void unsetRdf_triples() {
    this.rdf_triples = null;
  }

  /** Returns true if field rdf_triples is set (has been assigned a value) and false otherwise */
  public boolean isSetRdf_triples() {
    return this.rdf_triples != null;
  }

  public void setRdf_triplesIsSet(boolean value) {
    if (!value) {
      this.rdf_triples = null;
    }
  }

  public int getNum_mentions() {
    return this.num_mentions;
  }

  public WikipediaEntity setNum_mentions(int num_mentions) {
    this.num_mentions = num_mentions;
    setNum_mentionsIsSet(true);
    return this;
  }

  public void unsetNum_mentions() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_MENTIONS_ISSET_ID);
  }

  /** Returns true if field num_mentions is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_mentions() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_MENTIONS_ISSET_ID);
  }

  public void setNum_mentionsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_MENTIONS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case WIKIPEDIA_ID:
      if (value == null) {
        unsetWikipedia_id();
      } else {
        setWikipedia_id((String)value);
      }
      break;

    case DISPLAY_NAME:
      if (value == null) {
        unsetDisplay_name();
      } else {
        setDisplay_name((String)value);
      }
      break;

    case EXTERNAL_LINK:
      if (value == null) {
        unsetExternal_link();
      } else {
        setExternal_link((String)value);
      }
      break;

    case IMAGE_LINKS:
      if (value == null) {
        unsetImage_links();
      } else {
        setImage_links((List<String>)value);
      }
      break;

    case RDF_TRIPLES:
      if (value == null) {
        unsetRdf_triples();
      } else {
        setRdf_triples((String)value);
      }
      break;

    case NUM_MENTIONS:
      if (value == null) {
        unsetNum_mentions();
      } else {
        setNum_mentions((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case WIKIPEDIA_ID:
      return getWikipedia_id();

    case DISPLAY_NAME:
      return getDisplay_name();

    case EXTERNAL_LINK:
      return getExternal_link();

    case IMAGE_LINKS:
      return getImage_links();

    case RDF_TRIPLES:
      return getRdf_triples();

    case NUM_MENTIONS:
      return Integer.valueOf(getNum_mentions());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case WIKIPEDIA_ID:
      return isSetWikipedia_id();
    case DISPLAY_NAME:
      return isSetDisplay_name();
    case EXTERNAL_LINK:
      return isSetExternal_link();
    case IMAGE_LINKS:
      return isSetImage_links();
    case RDF_TRIPLES:
      return isSetRdf_triples();
    case NUM_MENTIONS:
      return isSetNum_mentions();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof WikipediaEntity)
      return this.equals((WikipediaEntity)that);
    return false;
  }

  public boolean equals(WikipediaEntity that) {
    if (that == null)
      return false;

    boolean this_present_wikipedia_id = true && this.isSetWikipedia_id();
    boolean that_present_wikipedia_id = true && that.isSetWikipedia_id();
    if (this_present_wikipedia_id || that_present_wikipedia_id) {
      if (!(this_present_wikipedia_id && that_present_wikipedia_id))
        return false;
      if (!this.wikipedia_id.equals(that.wikipedia_id))
        return false;
    }

    boolean this_present_display_name = true && this.isSetDisplay_name();
    boolean that_present_display_name = true && that.isSetDisplay_name();
    if (this_present_display_name || that_present_display_name) {
      if (!(this_present_display_name && that_present_display_name))
        return false;
      if (!this.display_name.equals(that.display_name))
        return false;
    }

    boolean this_present_external_link = true && this.isSetExternal_link();
    boolean that_present_external_link = true && that.isSetExternal_link();
    if (this_present_external_link || that_present_external_link) {
      if (!(this_present_external_link && that_present_external_link))
        return false;
      if (!this.external_link.equals(that.external_link))
        return false;
    }

    boolean this_present_image_links = true && this.isSetImage_links();
    boolean that_present_image_links = true && that.isSetImage_links();
    if (this_present_image_links || that_present_image_links) {
      if (!(this_present_image_links && that_present_image_links))
        return false;
      if (!this.image_links.equals(that.image_links))
        return false;
    }

    boolean this_present_rdf_triples = true && this.isSetRdf_triples();
    boolean that_present_rdf_triples = true && that.isSetRdf_triples();
    if (this_present_rdf_triples || that_present_rdf_triples) {
      if (!(this_present_rdf_triples && that_present_rdf_triples))
        return false;
      if (!this.rdf_triples.equals(that.rdf_triples))
        return false;
    }

    boolean this_present_num_mentions = true && this.isSetNum_mentions();
    boolean that_present_num_mentions = true && that.isSetNum_mentions();
    if (this_present_num_mentions || that_present_num_mentions) {
      if (!(this_present_num_mentions && that_present_num_mentions))
        return false;
      if (this.num_mentions != that.num_mentions)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_wikipedia_id = true && (isSetWikipedia_id());
    builder.append(present_wikipedia_id);
    if (present_wikipedia_id)
      builder.append(wikipedia_id);

    boolean present_display_name = true && (isSetDisplay_name());
    builder.append(present_display_name);
    if (present_display_name)
      builder.append(display_name);

    boolean present_external_link = true && (isSetExternal_link());
    builder.append(present_external_link);
    if (present_external_link)
      builder.append(external_link);

    boolean present_image_links = true && (isSetImage_links());
    builder.append(present_image_links);
    if (present_image_links)
      builder.append(image_links);

    boolean present_rdf_triples = true && (isSetRdf_triples());
    builder.append(present_rdf_triples);
    if (present_rdf_triples)
      builder.append(rdf_triples);

    boolean present_num_mentions = true && (isSetNum_mentions());
    builder.append(present_num_mentions);
    if (present_num_mentions)
      builder.append(num_mentions);

    return builder.toHashCode();
  }

  public int compareTo(WikipediaEntity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    WikipediaEntity typedOther = (WikipediaEntity)other;

    lastComparison = Boolean.valueOf(isSetWikipedia_id()).compareTo(typedOther.isSetWikipedia_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWikipedia_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wikipedia_id, typedOther.wikipedia_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisplay_name()).compareTo(typedOther.isSetDisplay_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisplay_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.display_name, typedOther.display_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExternal_link()).compareTo(typedOther.isSetExternal_link());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExternal_link()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.external_link, typedOther.external_link);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImage_links()).compareTo(typedOther.isSetImage_links());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImage_links()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.image_links, typedOther.image_links);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRdf_triples()).compareTo(typedOther.isSetRdf_triples());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRdf_triples()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rdf_triples, typedOther.rdf_triples);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_mentions()).compareTo(typedOther.isSetNum_mentions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_mentions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_mentions, typedOther.num_mentions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("WikipediaEntity(");
    boolean first = true;

    sb.append("wikipedia_id:");
    if (this.wikipedia_id == null) {
      sb.append("null");
    } else {
      sb.append(this.wikipedia_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("display_name:");
    if (this.display_name == null) {
      sb.append("null");
    } else {
      sb.append(this.display_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("external_link:");
    if (this.external_link == null) {
      sb.append("null");
    } else {
      sb.append(this.external_link);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("image_links:");
    if (this.image_links == null) {
      sb.append("null");
    } else {
      sb.append(this.image_links);
    }
    first = false;
    if (isSetRdf_triples()) {
      if (!first) sb.append(", ");
      sb.append("rdf_triples:");
      if (this.rdf_triples == null) {
        sb.append("null");
      } else {
        sb.append(this.rdf_triples);
      }
      first = false;
    }
    if (isSetNum_mentions()) {
      if (!first) sb.append(", ");
      sb.append("num_mentions:");
      sb.append(this.num_mentions);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WikipediaEntityStandardSchemeFactory implements SchemeFactory {
    public WikipediaEntityStandardScheme getScheme() {
      return new WikipediaEntityStandardScheme();
    }
  }

  private static class WikipediaEntityStandardScheme extends StandardScheme<WikipediaEntity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WikipediaEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // WIKIPEDIA_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.wikipedia_id = iprot.readString();
              struct.setWikipedia_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DISPLAY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.display_name = iprot.readString();
              struct.setDisplay_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXTERNAL_LINK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.external_link = iprot.readString();
              struct.setExternal_linkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IMAGE_LINKS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list114 = iprot.readListBegin();
                struct.image_links = new ArrayList<String>(_list114.size);
                for (int _i115 = 0; _i115 < _list114.size; ++_i115)
                {
                  String _elem116; // required
                  _elem116 = iprot.readString();
                  struct.image_links.add(_elem116);
                }
                iprot.readListEnd();
              }
              struct.setImage_linksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RDF_TRIPLES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rdf_triples = iprot.readString();
              struct.setRdf_triplesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NUM_MENTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_mentions = iprot.readI32();
              struct.setNum_mentionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WikipediaEntity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.wikipedia_id != null) {
        oprot.writeFieldBegin(WIKIPEDIA_ID_FIELD_DESC);
        oprot.writeString(struct.wikipedia_id);
        oprot.writeFieldEnd();
      }
      if (struct.display_name != null) {
        oprot.writeFieldBegin(DISPLAY_NAME_FIELD_DESC);
        oprot.writeString(struct.display_name);
        oprot.writeFieldEnd();
      }
      if (struct.external_link != null) {
        oprot.writeFieldBegin(EXTERNAL_LINK_FIELD_DESC);
        oprot.writeString(struct.external_link);
        oprot.writeFieldEnd();
      }
      if (struct.image_links != null) {
        oprot.writeFieldBegin(IMAGE_LINKS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.image_links.size()));
          for (String _iter117 : struct.image_links)
          {
            oprot.writeString(_iter117);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.rdf_triples != null) {
        if (struct.isSetRdf_triples()) {
          oprot.writeFieldBegin(RDF_TRIPLES_FIELD_DESC);
          oprot.writeString(struct.rdf_triples);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetNum_mentions()) {
        oprot.writeFieldBegin(NUM_MENTIONS_FIELD_DESC);
        oprot.writeI32(struct.num_mentions);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WikipediaEntityTupleSchemeFactory implements SchemeFactory {
    public WikipediaEntityTupleScheme getScheme() {
      return new WikipediaEntityTupleScheme();
    }
  }

  private static class WikipediaEntityTupleScheme extends TupleScheme<WikipediaEntity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WikipediaEntity struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetWikipedia_id()) {
        optionals.set(0);
      }
      if (struct.isSetDisplay_name()) {
        optionals.set(1);
      }
      if (struct.isSetExternal_link()) {
        optionals.set(2);
      }
      if (struct.isSetImage_links()) {
        optionals.set(3);
      }
      if (struct.isSetRdf_triples()) {
        optionals.set(4);
      }
      if (struct.isSetNum_mentions()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetWikipedia_id()) {
        oprot.writeString(struct.wikipedia_id);
      }
      if (struct.isSetDisplay_name()) {
        oprot.writeString(struct.display_name);
      }
      if (struct.isSetExternal_link()) {
        oprot.writeString(struct.external_link);
      }
      if (struct.isSetImage_links()) {
        {
          oprot.writeI32(struct.image_links.size());
          for (String _iter118 : struct.image_links)
          {
            oprot.writeString(_iter118);
          }
        }
      }
      if (struct.isSetRdf_triples()) {
        oprot.writeString(struct.rdf_triples);
      }
      if (struct.isSetNum_mentions()) {
        oprot.writeI32(struct.num_mentions);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WikipediaEntity struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.wikipedia_id = iprot.readString();
        struct.setWikipedia_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.display_name = iprot.readString();
        struct.setDisplay_nameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.external_link = iprot.readString();
        struct.setExternal_linkIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list119 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.image_links = new ArrayList<String>(_list119.size);
          for (int _i120 = 0; _i120 < _list119.size; ++_i120)
          {
            String _elem121; // required
            _elem121 = iprot.readString();
            struct.image_links.add(_elem121);
          }
        }
        struct.setImage_linksIsSet(true);
      }
      if (incoming.get(4)) {
        struct.rdf_triples = iprot.readString();
        struct.setRdf_triplesIsSet(true);
      }
      if (incoming.get(5)) {
        struct.num_mentions = iprot.readI32();
        struct.setNum_mentionsIsSet(true);
      }
    }
  }

}

