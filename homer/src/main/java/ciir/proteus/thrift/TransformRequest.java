/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ciir.proteus.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TransformRequest implements org.apache.thrift.TBase<TransformRequest, TransformRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TransformRequest");

  private static final org.apache.thrift.protocol.TField TRANSFORM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("transform_type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField REFERENCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reference_id", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField TARGET_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("target_type", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField TERM_FIELD_DESC = new org.apache.thrift.protocol.TField("term", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField RADIUS_IN_MILES_FIELD_DESC = new org.apache.thrift.protocol.TField("radius_in_miles", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TransformRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TransformRequestTupleSchemeFactory());
  }

  /**
   * 
   * @see TransformType
   */
  public TransformType transform_type; // required
  public AccessIdentifier reference_id; // required
  /**
   * 
   * @see ProteusType
   */
  public ProteusType target_type; // optional
  public RequestParameters params; // optional
  public String term; // optional
  public int radius_in_miles; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TransformType
     */
    TRANSFORM_TYPE((short)1, "transform_type"),
    REFERENCE_ID((short)2, "reference_id"),
    /**
     * 
     * @see ProteusType
     */
    TARGET_TYPE((short)3, "target_type"),
    PARAMS((short)4, "params"),
    TERM((short)5, "term"),
    RADIUS_IN_MILES((short)6, "radius_in_miles");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRANSFORM_TYPE
          return TRANSFORM_TYPE;
        case 2: // REFERENCE_ID
          return REFERENCE_ID;
        case 3: // TARGET_TYPE
          return TARGET_TYPE;
        case 4: // PARAMS
          return PARAMS;
        case 5: // TERM
          return TERM;
        case 6: // RADIUS_IN_MILES
          return RADIUS_IN_MILES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RADIUS_IN_MILES_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.TARGET_TYPE,_Fields.PARAMS,_Fields.TERM,_Fields.RADIUS_IN_MILES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRANSFORM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("transform_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TransformType.class)));
    tmpMap.put(_Fields.REFERENCE_ID, new org.apache.thrift.meta_data.FieldMetaData("reference_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AccessIdentifier.class)));
    tmpMap.put(_Fields.TARGET_TYPE, new org.apache.thrift.meta_data.FieldMetaData("target_type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ProteusType.class)));
    tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RequestParameters.class)));
    tmpMap.put(_Fields.TERM, new org.apache.thrift.meta_data.FieldMetaData("term", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RADIUS_IN_MILES, new org.apache.thrift.meta_data.FieldMetaData("radius_in_miles", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TransformRequest.class, metaDataMap);
  }

  public TransformRequest() {
    this.radius_in_miles = 10;

  }

  public TransformRequest(
    TransformType transform_type,
    AccessIdentifier reference_id)
  {
    this();
    this.transform_type = transform_type;
    this.reference_id = reference_id;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TransformRequest(TransformRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTransform_type()) {
      this.transform_type = other.transform_type;
    }
    if (other.isSetReference_id()) {
      this.reference_id = new AccessIdentifier(other.reference_id);
    }
    if (other.isSetTarget_type()) {
      this.target_type = other.target_type;
    }
    if (other.isSetParams()) {
      this.params = new RequestParameters(other.params);
    }
    if (other.isSetTerm()) {
      this.term = other.term;
    }
    this.radius_in_miles = other.radius_in_miles;
  }

  public TransformRequest deepCopy() {
    return new TransformRequest(this);
  }

  @Override
  public void clear() {
    this.transform_type = null;
    this.reference_id = null;
    this.target_type = null;
    this.params = null;
    this.term = null;
    this.radius_in_miles = 10;

  }

  /**
   * 
   * @see TransformType
   */
  public TransformType getTransform_type() {
    return this.transform_type;
  }

  /**
   * 
   * @see TransformType
   */
  public TransformRequest setTransform_type(TransformType transform_type) {
    this.transform_type = transform_type;
    return this;
  }

  public void unsetTransform_type() {
    this.transform_type = null;
  }

  /** Returns true if field transform_type is set (has been assigned a value) and false otherwise */
  public boolean isSetTransform_type() {
    return this.transform_type != null;
  }

  public void setTransform_typeIsSet(boolean value) {
    if (!value) {
      this.transform_type = null;
    }
  }

  public AccessIdentifier getReference_id() {
    return this.reference_id;
  }

  public TransformRequest setReference_id(AccessIdentifier reference_id) {
    this.reference_id = reference_id;
    return this;
  }

  public void unsetReference_id() {
    this.reference_id = null;
  }

  /** Returns true if field reference_id is set (has been assigned a value) and false otherwise */
  public boolean isSetReference_id() {
    return this.reference_id != null;
  }

  public void setReference_idIsSet(boolean value) {
    if (!value) {
      this.reference_id = null;
    }
  }

  /**
   * 
   * @see ProteusType
   */
  public ProteusType getTarget_type() {
    return this.target_type;
  }

  /**
   * 
   * @see ProteusType
   */
  public TransformRequest setTarget_type(ProteusType target_type) {
    this.target_type = target_type;
    return this;
  }

  public void unsetTarget_type() {
    this.target_type = null;
  }

  /** Returns true if field target_type is set (has been assigned a value) and false otherwise */
  public boolean isSetTarget_type() {
    return this.target_type != null;
  }

  public void setTarget_typeIsSet(boolean value) {
    if (!value) {
      this.target_type = null;
    }
  }

  public RequestParameters getParams() {
    return this.params;
  }

  public TransformRequest setParams(RequestParameters params) {
    this.params = params;
    return this;
  }

  public void unsetParams() {
    this.params = null;
  }

  /** Returns true if field params is set (has been assigned a value) and false otherwise */
  public boolean isSetParams() {
    return this.params != null;
  }

  public void setParamsIsSet(boolean value) {
    if (!value) {
      this.params = null;
    }
  }

  public String getTerm() {
    return this.term;
  }

  public TransformRequest setTerm(String term) {
    this.term = term;
    return this;
  }

  public void unsetTerm() {
    this.term = null;
  }

  /** Returns true if field term is set (has been assigned a value) and false otherwise */
  public boolean isSetTerm() {
    return this.term != null;
  }

  public void setTermIsSet(boolean value) {
    if (!value) {
      this.term = null;
    }
  }

  public int getRadius_in_miles() {
    return this.radius_in_miles;
  }

  public TransformRequest setRadius_in_miles(int radius_in_miles) {
    this.radius_in_miles = radius_in_miles;
    setRadius_in_milesIsSet(true);
    return this;
  }

  public void unsetRadius_in_miles() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RADIUS_IN_MILES_ISSET_ID);
  }

  /** Returns true if field radius_in_miles is set (has been assigned a value) and false otherwise */
  public boolean isSetRadius_in_miles() {
    return EncodingUtils.testBit(__isset_bitfield, __RADIUS_IN_MILES_ISSET_ID);
  }

  public void setRadius_in_milesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RADIUS_IN_MILES_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TRANSFORM_TYPE:
      if (value == null) {
        unsetTransform_type();
      } else {
        setTransform_type((TransformType)value);
      }
      break;

    case REFERENCE_ID:
      if (value == null) {
        unsetReference_id();
      } else {
        setReference_id((AccessIdentifier)value);
      }
      break;

    case TARGET_TYPE:
      if (value == null) {
        unsetTarget_type();
      } else {
        setTarget_type((ProteusType)value);
      }
      break;

    case PARAMS:
      if (value == null) {
        unsetParams();
      } else {
        setParams((RequestParameters)value);
      }
      break;

    case TERM:
      if (value == null) {
        unsetTerm();
      } else {
        setTerm((String)value);
      }
      break;

    case RADIUS_IN_MILES:
      if (value == null) {
        unsetRadius_in_miles();
      } else {
        setRadius_in_miles((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TRANSFORM_TYPE:
      return getTransform_type();

    case REFERENCE_ID:
      return getReference_id();

    case TARGET_TYPE:
      return getTarget_type();

    case PARAMS:
      return getParams();

    case TERM:
      return getTerm();

    case RADIUS_IN_MILES:
      return Integer.valueOf(getRadius_in_miles());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TRANSFORM_TYPE:
      return isSetTransform_type();
    case REFERENCE_ID:
      return isSetReference_id();
    case TARGET_TYPE:
      return isSetTarget_type();
    case PARAMS:
      return isSetParams();
    case TERM:
      return isSetTerm();
    case RADIUS_IN_MILES:
      return isSetRadius_in_miles();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TransformRequest)
      return this.equals((TransformRequest)that);
    return false;
  }

  public boolean equals(TransformRequest that) {
    if (that == null)
      return false;

    boolean this_present_transform_type = true && this.isSetTransform_type();
    boolean that_present_transform_type = true && that.isSetTransform_type();
    if (this_present_transform_type || that_present_transform_type) {
      if (!(this_present_transform_type && that_present_transform_type))
        return false;
      if (!this.transform_type.equals(that.transform_type))
        return false;
    }

    boolean this_present_reference_id = true && this.isSetReference_id();
    boolean that_present_reference_id = true && that.isSetReference_id();
    if (this_present_reference_id || that_present_reference_id) {
      if (!(this_present_reference_id && that_present_reference_id))
        return false;
      if (!this.reference_id.equals(that.reference_id))
        return false;
    }

    boolean this_present_target_type = true && this.isSetTarget_type();
    boolean that_present_target_type = true && that.isSetTarget_type();
    if (this_present_target_type || that_present_target_type) {
      if (!(this_present_target_type && that_present_target_type))
        return false;
      if (!this.target_type.equals(that.target_type))
        return false;
    }

    boolean this_present_params = true && this.isSetParams();
    boolean that_present_params = true && that.isSetParams();
    if (this_present_params || that_present_params) {
      if (!(this_present_params && that_present_params))
        return false;
      if (!this.params.equals(that.params))
        return false;
    }

    boolean this_present_term = true && this.isSetTerm();
    boolean that_present_term = true && that.isSetTerm();
    if (this_present_term || that_present_term) {
      if (!(this_present_term && that_present_term))
        return false;
      if (!this.term.equals(that.term))
        return false;
    }

    boolean this_present_radius_in_miles = true && this.isSetRadius_in_miles();
    boolean that_present_radius_in_miles = true && that.isSetRadius_in_miles();
    if (this_present_radius_in_miles || that_present_radius_in_miles) {
      if (!(this_present_radius_in_miles && that_present_radius_in_miles))
        return false;
      if (this.radius_in_miles != that.radius_in_miles)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_transform_type = true && (isSetTransform_type());
    builder.append(present_transform_type);
    if (present_transform_type)
      builder.append(transform_type.getValue());

    boolean present_reference_id = true && (isSetReference_id());
    builder.append(present_reference_id);
    if (present_reference_id)
      builder.append(reference_id);

    boolean present_target_type = true && (isSetTarget_type());
    builder.append(present_target_type);
    if (present_target_type)
      builder.append(target_type.getValue());

    boolean present_params = true && (isSetParams());
    builder.append(present_params);
    if (present_params)
      builder.append(params);

    boolean present_term = true && (isSetTerm());
    builder.append(present_term);
    if (present_term)
      builder.append(term);

    boolean present_radius_in_miles = true && (isSetRadius_in_miles());
    builder.append(present_radius_in_miles);
    if (present_radius_in_miles)
      builder.append(radius_in_miles);

    return builder.toHashCode();
  }

  public int compareTo(TransformRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TransformRequest typedOther = (TransformRequest)other;

    lastComparison = Boolean.valueOf(isSetTransform_type()).compareTo(typedOther.isSetTransform_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransform_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transform_type, typedOther.transform_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReference_id()).compareTo(typedOther.isSetReference_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReference_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reference_id, typedOther.reference_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTarget_type()).compareTo(typedOther.isSetTarget_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTarget_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.target_type, typedOther.target_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParams()).compareTo(typedOther.isSetParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, typedOther.params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTerm()).compareTo(typedOther.isSetTerm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTerm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.term, typedOther.term);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRadius_in_miles()).compareTo(typedOther.isSetRadius_in_miles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRadius_in_miles()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.radius_in_miles, typedOther.radius_in_miles);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TransformRequest(");
    boolean first = true;

    sb.append("transform_type:");
    if (this.transform_type == null) {
      sb.append("null");
    } else {
      sb.append(this.transform_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reference_id:");
    if (this.reference_id == null) {
      sb.append("null");
    } else {
      sb.append(this.reference_id);
    }
    first = false;
    if (isSetTarget_type()) {
      if (!first) sb.append(", ");
      sb.append("target_type:");
      if (this.target_type == null) {
        sb.append("null");
      } else {
        sb.append(this.target_type);
      }
      first = false;
    }
    if (isSetParams()) {
      if (!first) sb.append(", ");
      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
    }
    if (isSetTerm()) {
      if (!first) sb.append(", ");
      sb.append("term:");
      if (this.term == null) {
        sb.append("null");
      } else {
        sb.append(this.term);
      }
      first = false;
    }
    if (isSetRadius_in_miles()) {
      if (!first) sb.append(", ");
      sb.append("radius_in_miles:");
      sb.append(this.radius_in_miles);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (reference_id != null) {
      reference_id.validate();
    }
    if (params != null) {
      params.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TransformRequestStandardSchemeFactory implements SchemeFactory {
    public TransformRequestStandardScheme getScheme() {
      return new TransformRequestStandardScheme();
    }
  }

  private static class TransformRequestStandardScheme extends StandardScheme<TransformRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TransformRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TRANSFORM_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.transform_type = TransformType.findByValue(iprot.readI32());
              struct.setTransform_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REFERENCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.reference_id = new AccessIdentifier();
              struct.reference_id.read(iprot);
              struct.setReference_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TARGET_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.target_type = ProteusType.findByValue(iprot.readI32());
              struct.setTarget_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.params = new RequestParameters();
              struct.params.read(iprot);
              struct.setParamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TERM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.term = iprot.readString();
              struct.setTermIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RADIUS_IN_MILES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.radius_in_miles = iprot.readI32();
              struct.setRadius_in_milesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TransformRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.transform_type != null) {
        oprot.writeFieldBegin(TRANSFORM_TYPE_FIELD_DESC);
        oprot.writeI32(struct.transform_type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.reference_id != null) {
        oprot.writeFieldBegin(REFERENCE_ID_FIELD_DESC);
        struct.reference_id.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.target_type != null) {
        if (struct.isSetTarget_type()) {
          oprot.writeFieldBegin(TARGET_TYPE_FIELD_DESC);
          oprot.writeI32(struct.target_type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.params != null) {
        if (struct.isSetParams()) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          struct.params.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.term != null) {
        if (struct.isSetTerm()) {
          oprot.writeFieldBegin(TERM_FIELD_DESC);
          oprot.writeString(struct.term);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRadius_in_miles()) {
        oprot.writeFieldBegin(RADIUS_IN_MILES_FIELD_DESC);
        oprot.writeI32(struct.radius_in_miles);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TransformRequestTupleSchemeFactory implements SchemeFactory {
    public TransformRequestTupleScheme getScheme() {
      return new TransformRequestTupleScheme();
    }
  }

  private static class TransformRequestTupleScheme extends TupleScheme<TransformRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TransformRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTransform_type()) {
        optionals.set(0);
      }
      if (struct.isSetReference_id()) {
        optionals.set(1);
      }
      if (struct.isSetTarget_type()) {
        optionals.set(2);
      }
      if (struct.isSetParams()) {
        optionals.set(3);
      }
      if (struct.isSetTerm()) {
        optionals.set(4);
      }
      if (struct.isSetRadius_in_miles()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetTransform_type()) {
        oprot.writeI32(struct.transform_type.getValue());
      }
      if (struct.isSetReference_id()) {
        struct.reference_id.write(oprot);
      }
      if (struct.isSetTarget_type()) {
        oprot.writeI32(struct.target_type.getValue());
      }
      if (struct.isSetParams()) {
        struct.params.write(oprot);
      }
      if (struct.isSetTerm()) {
        oprot.writeString(struct.term);
      }
      if (struct.isSetRadius_in_miles()) {
        oprot.writeI32(struct.radius_in_miles);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TransformRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.transform_type = TransformType.findByValue(iprot.readI32());
        struct.setTransform_typeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.reference_id = new AccessIdentifier();
        struct.reference_id.read(iprot);
        struct.setReference_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.target_type = ProteusType.findByValue(iprot.readI32());
        struct.setTarget_typeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.params = new RequestParameters();
        struct.params.read(iprot);
        struct.setParamsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.term = iprot.readString();
        struct.setTermIsSet(true);
      }
      if (incoming.get(5)) {
        struct.radius_in_miles = iprot.readI32();
        struct.setRadius_in_milesIsSet(true);
      }
    }
  }

}

