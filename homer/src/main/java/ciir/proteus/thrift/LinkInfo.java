/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ciir.proteus.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class LinkInfo implements org.apache.thrift.TBase<LinkInfo, LinkInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LinkInfo");

  private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TARGET_FIELD_DESC = new org.apache.thrift.protocol.TField("target", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField NUM_LINKS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_links", org.apache.thrift.protocol.TType.I64, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LinkInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LinkInfoTupleSchemeFactory());
  }

  /**
   * 
   * @see ProteusType
   */
  public ProteusType src; // required
  /**
   * 
   * @see ProteusType
   */
  public ProteusType target; // required
  public long num_links; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see ProteusType
     */
    SRC((short)1, "src"),
    /**
     * 
     * @see ProteusType
     */
    TARGET((short)2, "target"),
    NUM_LINKS((short)3, "num_links");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SRC
          return SRC;
        case 2: // TARGET
          return TARGET;
        case 3: // NUM_LINKS
          return NUM_LINKS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUM_LINKS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ProteusType.class)));
    tmpMap.put(_Fields.TARGET, new org.apache.thrift.meta_data.FieldMetaData("target", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ProteusType.class)));
    tmpMap.put(_Fields.NUM_LINKS, new org.apache.thrift.meta_data.FieldMetaData("num_links", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LinkInfo.class, metaDataMap);
  }

  public LinkInfo() {
  }

  public LinkInfo(
    ProteusType src,
    ProteusType target,
    long num_links)
  {
    this();
    this.src = src;
    this.target = target;
    this.num_links = num_links;
    setNum_linksIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LinkInfo(LinkInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSrc()) {
      this.src = other.src;
    }
    if (other.isSetTarget()) {
      this.target = other.target;
    }
    this.num_links = other.num_links;
  }

  public LinkInfo deepCopy() {
    return new LinkInfo(this);
  }

  @Override
  public void clear() {
    this.src = null;
    this.target = null;
    setNum_linksIsSet(false);
    this.num_links = 0;
  }

  /**
   * 
   * @see ProteusType
   */
  public ProteusType getSrc() {
    return this.src;
  }

  /**
   * 
   * @see ProteusType
   */
  public LinkInfo setSrc(ProteusType src) {
    this.src = src;
    return this;
  }

  public void unsetSrc() {
    this.src = null;
  }

  /** Returns true if field src is set (has been assigned a value) and false otherwise */
  public boolean isSetSrc() {
    return this.src != null;
  }

  public void setSrcIsSet(boolean value) {
    if (!value) {
      this.src = null;
    }
  }

  /**
   * 
   * @see ProteusType
   */
  public ProteusType getTarget() {
    return this.target;
  }

  /**
   * 
   * @see ProteusType
   */
  public LinkInfo setTarget(ProteusType target) {
    this.target = target;
    return this;
  }

  public void unsetTarget() {
    this.target = null;
  }

  /** Returns true if field target is set (has been assigned a value) and false otherwise */
  public boolean isSetTarget() {
    return this.target != null;
  }

  public void setTargetIsSet(boolean value) {
    if (!value) {
      this.target = null;
    }
  }

  public long getNum_links() {
    return this.num_links;
  }

  public LinkInfo setNum_links(long num_links) {
    this.num_links = num_links;
    setNum_linksIsSet(true);
    return this;
  }

  public void unsetNum_links() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_LINKS_ISSET_ID);
  }

  /** Returns true if field num_links is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_links() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_LINKS_ISSET_ID);
  }

  public void setNum_linksIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_LINKS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SRC:
      if (value == null) {
        unsetSrc();
      } else {
        setSrc((ProteusType)value);
      }
      break;

    case TARGET:
      if (value == null) {
        unsetTarget();
      } else {
        setTarget((ProteusType)value);
      }
      break;

    case NUM_LINKS:
      if (value == null) {
        unsetNum_links();
      } else {
        setNum_links((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SRC:
      return getSrc();

    case TARGET:
      return getTarget();

    case NUM_LINKS:
      return Long.valueOf(getNum_links());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SRC:
      return isSetSrc();
    case TARGET:
      return isSetTarget();
    case NUM_LINKS:
      return isSetNum_links();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LinkInfo)
      return this.equals((LinkInfo)that);
    return false;
  }

  public boolean equals(LinkInfo that) {
    if (that == null)
      return false;

    boolean this_present_src = true && this.isSetSrc();
    boolean that_present_src = true && that.isSetSrc();
    if (this_present_src || that_present_src) {
      if (!(this_present_src && that_present_src))
        return false;
      if (!this.src.equals(that.src))
        return false;
    }

    boolean this_present_target = true && this.isSetTarget();
    boolean that_present_target = true && that.isSetTarget();
    if (this_present_target || that_present_target) {
      if (!(this_present_target && that_present_target))
        return false;
      if (!this.target.equals(that.target))
        return false;
    }

    boolean this_present_num_links = true;
    boolean that_present_num_links = true;
    if (this_present_num_links || that_present_num_links) {
      if (!(this_present_num_links && that_present_num_links))
        return false;
      if (this.num_links != that.num_links)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_src = true && (isSetSrc());
    builder.append(present_src);
    if (present_src)
      builder.append(src.getValue());

    boolean present_target = true && (isSetTarget());
    builder.append(present_target);
    if (present_target)
      builder.append(target.getValue());

    boolean present_num_links = true;
    builder.append(present_num_links);
    if (present_num_links)
      builder.append(num_links);

    return builder.toHashCode();
  }

  public int compareTo(LinkInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    LinkInfo typedOther = (LinkInfo)other;

    lastComparison = Boolean.valueOf(isSetSrc()).compareTo(typedOther.isSetSrc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, typedOther.src);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTarget()).compareTo(typedOther.isSetTarget());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTarget()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.target, typedOther.target);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum_links()).compareTo(typedOther.isSetNum_links());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_links()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_links, typedOther.num_links);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LinkInfo(");
    boolean first = true;

    sb.append("src:");
    if (this.src == null) {
      sb.append("null");
    } else {
      sb.append(this.src);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("target:");
    if (this.target == null) {
      sb.append("null");
    } else {
      sb.append(this.target);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("num_links:");
    sb.append(this.num_links);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LinkInfoStandardSchemeFactory implements SchemeFactory {
    public LinkInfoStandardScheme getScheme() {
      return new LinkInfoStandardScheme();
    }
  }

  private static class LinkInfoStandardScheme extends StandardScheme<LinkInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LinkInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SRC
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.src = ProteusType.findByValue(iprot.readI32());
              struct.setSrcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TARGET
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.target = ProteusType.findByValue(iprot.readI32());
              struct.setTargetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NUM_LINKS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.num_links = iprot.readI64();
              struct.setNum_linksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LinkInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.src != null) {
        oprot.writeFieldBegin(SRC_FIELD_DESC);
        oprot.writeI32(struct.src.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.target != null) {
        oprot.writeFieldBegin(TARGET_FIELD_DESC);
        oprot.writeI32(struct.target.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NUM_LINKS_FIELD_DESC);
      oprot.writeI64(struct.num_links);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LinkInfoTupleSchemeFactory implements SchemeFactory {
    public LinkInfoTupleScheme getScheme() {
      return new LinkInfoTupleScheme();
    }
  }

  private static class LinkInfoTupleScheme extends TupleScheme<LinkInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LinkInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSrc()) {
        optionals.set(0);
      }
      if (struct.isSetTarget()) {
        optionals.set(1);
      }
      if (struct.isSetNum_links()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetSrc()) {
        oprot.writeI32(struct.src.getValue());
      }
      if (struct.isSetTarget()) {
        oprot.writeI32(struct.target.getValue());
      }
      if (struct.isSetNum_links()) {
        oprot.writeI64(struct.num_links);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LinkInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.src = ProteusType.findByValue(iprot.readI32());
        struct.setSrcIsSet(true);
      }
      if (incoming.get(1)) {
        struct.target = ProteusType.findByValue(iprot.readI32());
        struct.setTargetIsSet(true);
      }
      if (incoming.get(2)) {
        struct.num_links = iprot.readI64();
        struct.setNum_linksIsSet(true);
      }
    }
  }

}

