/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ciir.proteus.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class IndexLink implements org.apache.thrift.TBase<IndexLink, IndexLink._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IndexLink");

  private static final org.apache.thrift.protocol.TField SRCID_FIELD_DESC = new org.apache.thrift.protocol.TField("srcid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SRCTYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("srctype", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TARGET_FIELD_DESC = new org.apache.thrift.protocol.TField("target", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new IndexLinkStandardSchemeFactory());
    schemes.put(TupleScheme.class, new IndexLinkTupleSchemeFactory());
  }

  public String srcid; // required
  public String srctype; // required
  public List<Target> target; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SRCID((short)1, "srcid"),
    SRCTYPE((short)2, "srctype"),
    TARGET((short)3, "target");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SRCID
          return SRCID;
        case 2: // SRCTYPE
          return SRCTYPE;
        case 3: // TARGET
          return TARGET;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SRCID, new org.apache.thrift.meta_data.FieldMetaData("srcid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SRCTYPE, new org.apache.thrift.meta_data.FieldMetaData("srctype", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TARGET, new org.apache.thrift.meta_data.FieldMetaData("target", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Target.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IndexLink.class, metaDataMap);
  }

  public IndexLink() {
  }

  public IndexLink(
    String srcid,
    String srctype,
    List<Target> target)
  {
    this();
    this.srcid = srcid;
    this.srctype = srctype;
    this.target = target;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public IndexLink(IndexLink other) {
    if (other.isSetSrcid()) {
      this.srcid = other.srcid;
    }
    if (other.isSetSrctype()) {
      this.srctype = other.srctype;
    }
    if (other.isSetTarget()) {
      List<Target> __this__target = new ArrayList<Target>();
      for (Target other_element : other.target) {
        __this__target.add(new Target(other_element));
      }
      this.target = __this__target;
    }
  }

  public IndexLink deepCopy() {
    return new IndexLink(this);
  }

  @Override
  public void clear() {
    this.srcid = null;
    this.srctype = null;
    this.target = null;
  }

  public String getSrcid() {
    return this.srcid;
  }

  public IndexLink setSrcid(String srcid) {
    this.srcid = srcid;
    return this;
  }

  public void unsetSrcid() {
    this.srcid = null;
  }

  /** Returns true if field srcid is set (has been assigned a value) and false otherwise */
  public boolean isSetSrcid() {
    return this.srcid != null;
  }

  public void setSrcidIsSet(boolean value) {
    if (!value) {
      this.srcid = null;
    }
  }

  public String getSrctype() {
    return this.srctype;
  }

  public IndexLink setSrctype(String srctype) {
    this.srctype = srctype;
    return this;
  }

  public void unsetSrctype() {
    this.srctype = null;
  }

  /** Returns true if field srctype is set (has been assigned a value) and false otherwise */
  public boolean isSetSrctype() {
    return this.srctype != null;
  }

  public void setSrctypeIsSet(boolean value) {
    if (!value) {
      this.srctype = null;
    }
  }

  public int getTargetSize() {
    return (this.target == null) ? 0 : this.target.size();
  }

  public java.util.Iterator<Target> getTargetIterator() {
    return (this.target == null) ? null : this.target.iterator();
  }

  public void addToTarget(Target elem) {
    if (this.target == null) {
      this.target = new ArrayList<Target>();
    }
    this.target.add(elem);
  }

  public List<Target> getTarget() {
    return this.target;
  }

  public IndexLink setTarget(List<Target> target) {
    this.target = target;
    return this;
  }

  public void unsetTarget() {
    this.target = null;
  }

  /** Returns true if field target is set (has been assigned a value) and false otherwise */
  public boolean isSetTarget() {
    return this.target != null;
  }

  public void setTargetIsSet(boolean value) {
    if (!value) {
      this.target = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SRCID:
      if (value == null) {
        unsetSrcid();
      } else {
        setSrcid((String)value);
      }
      break;

    case SRCTYPE:
      if (value == null) {
        unsetSrctype();
      } else {
        setSrctype((String)value);
      }
      break;

    case TARGET:
      if (value == null) {
        unsetTarget();
      } else {
        setTarget((List<Target>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SRCID:
      return getSrcid();

    case SRCTYPE:
      return getSrctype();

    case TARGET:
      return getTarget();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SRCID:
      return isSetSrcid();
    case SRCTYPE:
      return isSetSrctype();
    case TARGET:
      return isSetTarget();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof IndexLink)
      return this.equals((IndexLink)that);
    return false;
  }

  public boolean equals(IndexLink that) {
    if (that == null)
      return false;

    boolean this_present_srcid = true && this.isSetSrcid();
    boolean that_present_srcid = true && that.isSetSrcid();
    if (this_present_srcid || that_present_srcid) {
      if (!(this_present_srcid && that_present_srcid))
        return false;
      if (!this.srcid.equals(that.srcid))
        return false;
    }

    boolean this_present_srctype = true && this.isSetSrctype();
    boolean that_present_srctype = true && that.isSetSrctype();
    if (this_present_srctype || that_present_srctype) {
      if (!(this_present_srctype && that_present_srctype))
        return false;
      if (!this.srctype.equals(that.srctype))
        return false;
    }

    boolean this_present_target = true && this.isSetTarget();
    boolean that_present_target = true && that.isSetTarget();
    if (this_present_target || that_present_target) {
      if (!(this_present_target && that_present_target))
        return false;
      if (!this.target.equals(that.target))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_srcid = true && (isSetSrcid());
    builder.append(present_srcid);
    if (present_srcid)
      builder.append(srcid);

    boolean present_srctype = true && (isSetSrctype());
    builder.append(present_srctype);
    if (present_srctype)
      builder.append(srctype);

    boolean present_target = true && (isSetTarget());
    builder.append(present_target);
    if (present_target)
      builder.append(target);

    return builder.toHashCode();
  }

  public int compareTo(IndexLink other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    IndexLink typedOther = (IndexLink)other;

    lastComparison = Boolean.valueOf(isSetSrcid()).compareTo(typedOther.isSetSrcid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrcid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcid, typedOther.srcid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSrctype()).compareTo(typedOther.isSetSrctype());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrctype()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srctype, typedOther.srctype);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTarget()).compareTo(typedOther.isSetTarget());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTarget()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.target, typedOther.target);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("IndexLink(");
    boolean first = true;

    sb.append("srcid:");
    if (this.srcid == null) {
      sb.append("null");
    } else {
      sb.append(this.srcid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("srctype:");
    if (this.srctype == null) {
      sb.append("null");
    } else {
      sb.append(this.srctype);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("target:");
    if (this.target == null) {
      sb.append("null");
    } else {
      sb.append(this.target);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class IndexLinkStandardSchemeFactory implements SchemeFactory {
    public IndexLinkStandardScheme getScheme() {
      return new IndexLinkStandardScheme();
    }
  }

  private static class IndexLinkStandardScheme extends StandardScheme<IndexLink> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, IndexLink struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SRCID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.srcid = iprot.readString();
              struct.setSrcidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SRCTYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.srctype = iprot.readString();
              struct.setSrctypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TARGET
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list218 = iprot.readListBegin();
                struct.target = new ArrayList<Target>(_list218.size);
                for (int _i219 = 0; _i219 < _list218.size; ++_i219)
                {
                  Target _elem220; // required
                  _elem220 = new Target();
                  _elem220.read(iprot);
                  struct.target.add(_elem220);
                }
                iprot.readListEnd();
              }
              struct.setTargetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, IndexLink struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.srcid != null) {
        oprot.writeFieldBegin(SRCID_FIELD_DESC);
        oprot.writeString(struct.srcid);
        oprot.writeFieldEnd();
      }
      if (struct.srctype != null) {
        oprot.writeFieldBegin(SRCTYPE_FIELD_DESC);
        oprot.writeString(struct.srctype);
        oprot.writeFieldEnd();
      }
      if (struct.target != null) {
        oprot.writeFieldBegin(TARGET_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.target.size()));
          for (Target _iter221 : struct.target)
          {
            _iter221.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class IndexLinkTupleSchemeFactory implements SchemeFactory {
    public IndexLinkTupleScheme getScheme() {
      return new IndexLinkTupleScheme();
    }
  }

  private static class IndexLinkTupleScheme extends TupleScheme<IndexLink> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, IndexLink struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSrcid()) {
        optionals.set(0);
      }
      if (struct.isSetSrctype()) {
        optionals.set(1);
      }
      if (struct.isSetTarget()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetSrcid()) {
        oprot.writeString(struct.srcid);
      }
      if (struct.isSetSrctype()) {
        oprot.writeString(struct.srctype);
      }
      if (struct.isSetTarget()) {
        {
          oprot.writeI32(struct.target.size());
          for (Target _iter222 : struct.target)
          {
            _iter222.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, IndexLink struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.srcid = iprot.readString();
        struct.setSrcidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.srctype = iprot.readString();
        struct.setSrctypeIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list223 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.target = new ArrayList<Target>(_list223.size);
          for (int _i224 = 0; _i224 < _list223.size; ++_i224)
          {
            Target _elem225; // required
            _elem225 = new Target();
            _elem225.read(iprot);
            struct.target.add(_elem225);
          }
        }
        struct.setTargetIsSet(true);
      }
    }
  }

}

