/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ciir.proteus.thrift;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RequestParameters implements org.apache.thrift.TBase<RequestParameters, RequestParameters._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RequestParameters");

  private static final org.apache.thrift.protocol.TField NUM_RESULTS_REQUESTED_FIELD_DESC = new org.apache.thrift.protocol.TField("num_results_requested", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField START_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("start_at", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField LANGUAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("language", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RequestParametersStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RequestParametersTupleSchemeFactory());
  }

  public int num_results_requested; // required
  public int start_at; // required
  public String language; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NUM_RESULTS_REQUESTED((short)1, "num_results_requested"),
    START_AT((short)2, "start_at"),
    LANGUAGE((short)3, "language");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NUM_RESULTS_REQUESTED
          return NUM_RESULTS_REQUESTED;
        case 2: // START_AT
          return START_AT;
        case 3: // LANGUAGE
          return LANGUAGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUM_RESULTS_REQUESTED_ISSET_ID = 0;
  private static final int __START_AT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NUM_RESULTS_REQUESTED, new org.apache.thrift.meta_data.FieldMetaData("num_results_requested", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.START_AT, new org.apache.thrift.meta_data.FieldMetaData("start_at", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LANGUAGE, new org.apache.thrift.meta_data.FieldMetaData("language", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RequestParameters.class, metaDataMap);
  }

  public RequestParameters() {
    this.num_results_requested = 10;

    this.start_at = 0;

    this.language = "en";

  }

  public RequestParameters(
    int num_results_requested,
    int start_at,
    String language)
  {
    this();
    this.num_results_requested = num_results_requested;
    setNum_results_requestedIsSet(true);
    this.start_at = start_at;
    setStart_atIsSet(true);
    this.language = language;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RequestParameters(RequestParameters other) {
    __isset_bitfield = other.__isset_bitfield;
    this.num_results_requested = other.num_results_requested;
    this.start_at = other.start_at;
    if (other.isSetLanguage()) {
      this.language = other.language;
    }
  }

  public RequestParameters deepCopy() {
    return new RequestParameters(this);
  }

  @Override
  public void clear() {
    this.num_results_requested = 10;

    this.start_at = 0;

    this.language = "en";

  }

  public int getNum_results_requested() {
    return this.num_results_requested;
  }

  public RequestParameters setNum_results_requested(int num_results_requested) {
    this.num_results_requested = num_results_requested;
    setNum_results_requestedIsSet(true);
    return this;
  }

  public void unsetNum_results_requested() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_RESULTS_REQUESTED_ISSET_ID);
  }

  /** Returns true if field num_results_requested is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_results_requested() {
    return EncodingUtils.testBit(__isset_bitfield, __NUM_RESULTS_REQUESTED_ISSET_ID);
  }

  public void setNum_results_requestedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_RESULTS_REQUESTED_ISSET_ID, value);
  }

  public int getStart_at() {
    return this.start_at;
  }

  public RequestParameters setStart_at(int start_at) {
    this.start_at = start_at;
    setStart_atIsSet(true);
    return this;
  }

  public void unsetStart_at() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __START_AT_ISSET_ID);
  }

  /** Returns true if field start_at is set (has been assigned a value) and false otherwise */
  public boolean isSetStart_at() {
    return EncodingUtils.testBit(__isset_bitfield, __START_AT_ISSET_ID);
  }

  public void setStart_atIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __START_AT_ISSET_ID, value);
  }

  public String getLanguage() {
    return this.language;
  }

  public RequestParameters setLanguage(String language) {
    this.language = language;
    return this;
  }

  public void unsetLanguage() {
    this.language = null;
  }

  /** Returns true if field language is set (has been assigned a value) and false otherwise */
  public boolean isSetLanguage() {
    return this.language != null;
  }

  public void setLanguageIsSet(boolean value) {
    if (!value) {
      this.language = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NUM_RESULTS_REQUESTED:
      if (value == null) {
        unsetNum_results_requested();
      } else {
        setNum_results_requested((Integer)value);
      }
      break;

    case START_AT:
      if (value == null) {
        unsetStart_at();
      } else {
        setStart_at((Integer)value);
      }
      break;

    case LANGUAGE:
      if (value == null) {
        unsetLanguage();
      } else {
        setLanguage((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NUM_RESULTS_REQUESTED:
      return Integer.valueOf(getNum_results_requested());

    case START_AT:
      return Integer.valueOf(getStart_at());

    case LANGUAGE:
      return getLanguage();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NUM_RESULTS_REQUESTED:
      return isSetNum_results_requested();
    case START_AT:
      return isSetStart_at();
    case LANGUAGE:
      return isSetLanguage();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RequestParameters)
      return this.equals((RequestParameters)that);
    return false;
  }

  public boolean equals(RequestParameters that) {
    if (that == null)
      return false;

    boolean this_present_num_results_requested = true;
    boolean that_present_num_results_requested = true;
    if (this_present_num_results_requested || that_present_num_results_requested) {
      if (!(this_present_num_results_requested && that_present_num_results_requested))
        return false;
      if (this.num_results_requested != that.num_results_requested)
        return false;
    }

    boolean this_present_start_at = true;
    boolean that_present_start_at = true;
    if (this_present_start_at || that_present_start_at) {
      if (!(this_present_start_at && that_present_start_at))
        return false;
      if (this.start_at != that.start_at)
        return false;
    }

    boolean this_present_language = true && this.isSetLanguage();
    boolean that_present_language = true && that.isSetLanguage();
    if (this_present_language || that_present_language) {
      if (!(this_present_language && that_present_language))
        return false;
      if (!this.language.equals(that.language))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_num_results_requested = true;
    builder.append(present_num_results_requested);
    if (present_num_results_requested)
      builder.append(num_results_requested);

    boolean present_start_at = true;
    builder.append(present_start_at);
    if (present_start_at)
      builder.append(start_at);

    boolean present_language = true && (isSetLanguage());
    builder.append(present_language);
    if (present_language)
      builder.append(language);

    return builder.toHashCode();
  }

  public int compareTo(RequestParameters other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    RequestParameters typedOther = (RequestParameters)other;

    lastComparison = Boolean.valueOf(isSetNum_results_requested()).compareTo(typedOther.isSetNum_results_requested());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_results_requested()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_results_requested, typedOther.num_results_requested);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStart_at()).compareTo(typedOther.isSetStart_at());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart_at()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_at, typedOther.start_at);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLanguage()).compareTo(typedOther.isSetLanguage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLanguage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.language, typedOther.language);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RequestParameters(");
    boolean first = true;

    sb.append("num_results_requested:");
    sb.append(this.num_results_requested);
    first = false;
    if (!first) sb.append(", ");
    sb.append("start_at:");
    sb.append(this.start_at);
    first = false;
    if (!first) sb.append(", ");
    sb.append("language:");
    if (this.language == null) {
      sb.append("null");
    } else {
      sb.append(this.language);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RequestParametersStandardSchemeFactory implements SchemeFactory {
    public RequestParametersStandardScheme getScheme() {
      return new RequestParametersStandardScheme();
    }
  }

  private static class RequestParametersStandardScheme extends StandardScheme<RequestParameters> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RequestParameters struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NUM_RESULTS_REQUESTED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_results_requested = iprot.readI32();
              struct.setNum_results_requestedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // START_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.start_at = iprot.readI32();
              struct.setStart_atIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LANGUAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.language = iprot.readString();
              struct.setLanguageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RequestParameters struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NUM_RESULTS_REQUESTED_FIELD_DESC);
      oprot.writeI32(struct.num_results_requested);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_AT_FIELD_DESC);
      oprot.writeI32(struct.start_at);
      oprot.writeFieldEnd();
      if (struct.language != null) {
        oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
        oprot.writeString(struct.language);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RequestParametersTupleSchemeFactory implements SchemeFactory {
    public RequestParametersTupleScheme getScheme() {
      return new RequestParametersTupleScheme();
    }
  }

  private static class RequestParametersTupleScheme extends TupleScheme<RequestParameters> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RequestParameters struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetNum_results_requested()) {
        optionals.set(0);
      }
      if (struct.isSetStart_at()) {
        optionals.set(1);
      }
      if (struct.isSetLanguage()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetNum_results_requested()) {
        oprot.writeI32(struct.num_results_requested);
      }
      if (struct.isSetStart_at()) {
        oprot.writeI32(struct.start_at);
      }
      if (struct.isSetLanguage()) {
        oprot.writeString(struct.language);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RequestParameters struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.num_results_requested = iprot.readI32();
        struct.setNum_results_requestedIsSet(true);
      }
      if (incoming.get(1)) {
        struct.start_at = iprot.readI32();
        struct.setStart_atIsSet(true);
      }
      if (incoming.get(2)) {
        struct.language = iprot.readString();
        struct.setLanguageIsSet(true);
      }
    }
  }

}

