// This protocol buffer definition makes heavy use of
// nested message definition and composition to keep the
// number of top level messages small:
//
// - AccessIdentifier
// - RequestParameters
// - SearchRequest
// - SearchResponse
// - LookupRequest
// - LookupResponse
// - TransformRequest
// - TransformResponse
// - ConnectToClient
// - ConnectToProvider
//
// It also means the inner messages have implicit context.
// Example: Coordinates are inside ProteusObject, as an object
// can have coordinates, and now we can't have orphan coordinate
// messages flying off into the ether. Subclassing is done via
// composition (the specializations are optional submessages)

option java_package = "edu.umass.ciir.proteus.protocol";

// The Core Proteus Types
enum ProteusType {
  COLLECTION = 0;
  PAGE = 1;
  PICTURE = 2;
  VIDEO = 3;
  AUDIO = 4;
  PERSON = 5;
  LOCATION = 6;
  ORGANIZATION = 7;
}

// List atomic messages first

// Information needed to access a specific resource item
// This object represents a "unique identifier" in the
// Proteus space.
message AccessIdentifier {
  // Identifier for the accessing a result, used for lookup of an object.
  required string identifier = 1;

  // The type of this object
  required ProteusType type = 2;

  // Indicates which library/resource this was pulled from.
  optional string resource_id = 3;

  // Provide error messages for any object passing, 
  // lookup not found errors report here.
  optional string error = 4;
}

// Parameters used in searching and transformations
message RequestParameters {
  optional int32 num_results_requested = 1 [default = 100];
  optional int32 start_at = 2 [default = 0];
  // Restrict results to this language
  optional string language = 3 [default = "en"];
}

// **** Query Type Messages ****
// Defines a search query to run
message SearchRequest {
  required string raw_query = 1;
  repeated ProteusType types = 2;
  optional RequestParameters params = 3;
}


// **** Response Type Messages ****
// The response message to a search query
message SearchResponse {

  // Defines a single result item from a search query
  message SearchResult {
    required AccessIdentifier id = 1;
    optional string title = 3;

    // A chunk of text with optional highlighting of regions
    message ResultSummary {
      required string text = 1;
      
      // Defines a region in text
      message TextRegion {
	// Starting character index, inclusive.
	required int32 start = 1;
	
	// Ending index, exclusive.
	required int32 stop = 2; 
      }
      repeated TextRegion highlights = 2;
    }
    
    optional ResultSummary summary = 4;
    optional string img_url = 5;
    optional string thumb_url = 6;
    // URL for visiting the original data source for this item
    optional string external_url = 7;
  }
  repeated SearchResult results = 1;
  optional string error = 2;
}

// **** Proteus Typed Data Structures ****
// We create a single ProteusObject message, that is
// then specialized via composition with lower level 
// optional messages
message ProteusObject {
  required AccessIdentifier id = 1;
  optional string title = 3;
  optional string description = 4;
  optional string img_url = 5;
  optional string thumb_url = 6;
  optional string external_url = 7;	

  // Dates where this object was mentioned (e.g. a person)
  // or dates contained by this object (e.g. collection)
  // A list of long values (dates) : weight (frequency) pairs. Used for date mentions, and other things.
  message LongValueHistogram {
    message WeightedDate {
      required sint64 date = 1;
      optional double weight = 2 [default = 1.0];
    }  
    repeated WeightedDate dates = 1;
  }
  optional LongValueHistogram date_freq = 8;
  
  // A list of string (term) : weight (frequency) pairs. Used for language models, and other things.
  message TermHistogram {	
    message WeightedTerm {
      required string term = 1;
      optional double weight = 2 [default = 1.0];
    }
    repeated WeightedTerm terms = 1;
  }
  optional TermHistogram language_model = 9;
  optional string language = 10 [default = "en"];

  // Each of the composed message types
  // Only one of these should be filled in for a given instance.

  // Collection: Book, Newspaper, Website, etc. 
  // (highest level container of data)
  message Collection {	
    optional sint64 publication_date = 1;
    optional string publisher = 2;
    optional string edition = 3;
    optional int32 num_pages = 4;
    repeated string creators = 5;
  }
  optional Collection collection = 11;

  // Page: Page in a book, page of a newspaper, web page on a site, etc.
  message Page {
    optional string full_text = 1;
    repeated string creators = 2;
    optional int32 page_number = 3;
  }
  optional Page page = 12;

  // Coordinates of something on a page
  message Coordinates {
    required int32 left = 1;
    required int32 right = 2;
    required int32 top = 3;
    required int32 bottom = 4;
  }

  // Picture: Picture on a page, on a webpage, etc. 
  // (There can be zero or more of these on a page)
  message Picture {
    optional string caption = 1;
    optional Coordinates coordinates = 2;
    repeated string creators = 3;
  }
  optional Picture picture = 13;

  // Video: Video contained on a web page, or other page instance 
  // (Zero or more per page)
  message Video {
    optional string caption = 1;
    optional Coordinates coordinates = 2;
    optional int32 length_in_seconds = 3;
    repeated string creators = 4;
  }
  optional Video video = 14;

  // Audio: Audio contained on a web page, or other page instance 
  // (Zero or more per page)
  message Audio {
    optional string caption = 1;
    optional Coordinates coordinates = 2;
    optional int32 length = 3;
    repeated string creators = 4;
  }
  optional Audio audio = 15;

  // Person: A person entity mentioned on a page 
  // (in text, picture, video, or audio)
  message Person {
    optional string full_name = 1;
    repeated string alternate_names = 2;
    optional string wiki_link = 3;
    optional sint64 birth_date = 4;
    optional sint64 death_date = 5;
  }
  optional Person person = 16;

  // Location: A location entity mentioned on a page
  message Location {
    optional string full_name = 1;
    repeated string alternate_names = 2 [packed=true];
    optional string wiki_link = 3;
    optional double longitude = 4;
    optional double latitude = 5;
  }
  optional Location location = 17;

  // Organization: An organization mentioned on a page
  message Organization {
    optional string full_name = 1;
    repeated string alternate_names = 2 [packed=true];
    optional string wiki_link = 3;
  }
  optional Organization organization = 18;
}

message TransformRequest {
  enum TransformType {
    TO_CONTAINER = 0;
    TO_CONTENTS = 1;
    OVERLAP = 2;
    OBJECT_OF = 3;
    SUBJECT_OF = 4;
    HAS_AS_OBJECT = 5;
    HAS_AS_SUBJECT = 6;
    GEOGRAPHIC_PROX = 7;
  }
  required TransformType transform_type = 1;
  required AccessIdentifier reference_id = 2;
  optional ProteusType target_type = 3;
  optional RequestParameters params = 4;
  // This is only used for *_OF and *_AS_* transforms 
  optional string term = 5;
  optional int32 radius_in_miles [default = 10] = 6;
}

message TransformResponse {
  repeated ProteusObject objects = 1 [packed=true];
}

// Something to look up one or more objects
message LookupRequest {
  repeated AccessIdentifier id = 1 [packed=true];
}

message LookupResponse {
  repeated ProteusObject objects = 1 [packed=true];
}
